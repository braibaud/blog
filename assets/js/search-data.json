{
  
    
        "post0": {
            "title": "Check whether TensorFlow runs on GPU",
            "content": "import tensorflow as tf if tf.test.gpu_device_name(): print(&#39;Default GPU Device: {}&#39;.format(tf.test.gpu_device_name())) else: print(&#39;Please install GPU version of TF&#39;) . Default GPU Device: /device:GPU:0 .",
            "url": "https://braibaud.github.io/blog/python/machine%20learning/tensorflow/gpu/2021/06/01/Check-whether-TensorFlow-runs-on-GPU.html",
            "relUrl": "/python/machine%20learning/tensorflow/gpu/2021/06/01/Check-whether-TensorFlow-runs-on-GPU.html",
            "date": " • Jun 1, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "LSTM timeseries forecasting with Keras Tuner",
            "content": "About . This project is a demonstration of some of capabilities of Keras Tuner. This project is an attempt to use an LSTM based neural network (RNN) to forecast timeseries data. . The required libraries . Import the must-have libraries: . import numpy as np import pandas as pd import datetime as dt from IPython import display as ids . Import the elements required from the scikit-learn library: . import sklearn as sk import sklearn.preprocessing as skp import sklearn.model_selection as skms import sklearn.pipeline as skpl import sklearn.decomposition as skd import sklearn.linear_model as sklm import sklearn.dummy as sky import sklearn.metrics as skme . Enables defining partial functions: . from functools import partial . Import the keras elements from the tensorflow library: . import tensorflow as tf from tensorflow import keras as k from tensorflow.keras import backend as kb from tensorflow.keras import callbacks as kc from tensorflow.keras import models as km from tensorflow.keras import layers as kl from tensorflow.keras import regularizers as kr from tensorflow.keras import optimizers as ko from tensorflow.keras import utils as ku . Import the keras-tuner library as we&#39;ll use it to tune hyperparameters: . import kerastuner as kt from kerastuner import tuners as ktt from kerastuner import engine as kte . Import matplotlib and set the default magic: . import matplotlib as mat from matplotlib import pyplot as plt import pylab as pyl import seaborn as sns %matplotlib inline %config InlineBackend.figure_format = &#39;retina&#39; . Import the mlviz library used to plot time-series visualizations: . from mlviz.timeseries import visualizationhelpers as mwvh from mlviz.utilities import graphichelpers as mwgh . The project parameters . Reset the predefined matplotlib style: . mwgh.GraphicsStatics.initialize_matplotlib_styles() . Here is the color palette we&#39;ll use for the project: . sns.palplot(mwgh.GraphicsStatics.g_palette) . Let&#39;s capture all the usefull project&#39;s parameters in a dictionary: . params = {} params[&#39;project_date&#39;] = &#39;2021-05-31&#39; params[&#39;project_name&#39;] = &#39;LSTM+01&#39; params[&#39;experiment_timestamp&#39;] = str(int(1000 * dt.datetime.timestamp(dt.datetime.utcnow()))) params[&#39;experiment_name&#39;] = &#39;{0}-{1}-{2}&#39;.format( params[&#39;project_date&#39;], params[&#39;experiment_timestamp&#39;], params[&#39;project_name&#39;]) params[&#39;data_frequency&#39;] = &#39;W-SAT&#39; params[&#39;features&#39;] = [&#39;y&#39;] params[&#39;input_size&#39;] = 52 # N weeks of data to input into the network params[&#39;output_size&#39;] = 13 # N weeks of data to output from the network params[&#39;testing_size&#39;] = 52 # N weeks of data to keep for testing the model params[&#39;lag_size&#39;] = [13, 26, 39] # Lagged data series injected into the network params[&#39;hyperband_iterations&#39;] = 3 params[&#39;max_epochs&#39;] = 250 params[&#39;patience&#39;] = params[&#39;max_epochs&#39;] / 10 params[&#39;batch_size&#39;] = 32 . The timeseries data . The input data is available in a csv file named timeseries-data.csv located in the data folder. It has got 2 columns date containing the date of event and value holding the value of the source. We&#39;ll rename these 2 columns as ds and y for convenience. Let&#39;s load the csv file using the pandas library and have a look at the data. . df = pd.read_csv( filepath_or_buffer=&#39;../assets/data/timeseries-data.csv&#39;, sep=&#39;;&#39;) df.rename( columns = { &#39;date&#39;: &#39;index&#39;, &#39;value&#39;: &#39;y&#39; }, inplace=True) df[&#39;index&#39;] = pd.to_datetime( arg=df[&#39;index&#39;], dayfirst=True) df.sort_values( by=&#39;index&#39;, ascending=True, inplace=True) df.set_index( keys=&#39;index&#39;, inplace=True) df = df.asfreq( freq=params[&#39;data_frequency&#39;]) df[&#39;ds&#39;] = df.index print(&#39;df.shape = {0}&#39;.format(df.shape)) df.tail(5) . df.shape = (625, 2) . y ds . index . 2019-09-28 5547 | 2019-09-28 | . 2019-10-05 6459 | 2019-10-05 | . 2019-10-12 5838 | 2019-10-12 | . 2019-10-19 5894 | 2019-10-19 | . 2019-10-26 7925 | 2019-10-26 | . Prepare data for the network . It is time to prepare the dataset to feed into the LSTM model. We&#39;ll use 4 features as input: the current data point as well as 3 additional data points from respectively 13, 26 and 39 weeks before the current datapoint the lag features below). . . It&#39;s easy to calculate the width of a sample: . sample_width = max(params[&#39;lag_size&#39;]) + params[&#39;input_size&#39;] + params[&#39;output_size&#39;] print(&#39;sample_width: {0}&#39;.format(sample_width)) . sample_width: 104 . To avoid any overlap between the training and the testing data set, we&#39;ll first split the dataframes, keeping params[&#39;testing_size&#39;] samples for testing our model. We need to make sure that no data point used for training is also used for testing our model. . threshold_date = pd.to_datetime(df.index[df.shape[0] - (sample_width + params[&#39;testing_size&#39;])]) print(&#39;Cutoff date for training/testing split is {0}&#39;.format(threshold_date.strftime(&#39;%d/%m/%Y&#39;))) . Cutoff date for training/testing split is 05/11/2016 . Let&#39;s cut the dataframe at the right date: . test_mask = (df[&#39;ds&#39;] &gt; threshold_date) df_train = df[~test_mask] df_test = df[test_mask] print(&#39;df_train.shape = {0}&#39;.format(df_train.shape)) print(&#39;df_test.shape = {0}&#39;.format(df_test.shape)) . df_train.shape = (470, 2) df_test.shape = (155, 2) . The prepare_data funtion will take care of doing exactly this: . def prepare_data(data, lag_data, cols_in, steps_in, cols_out, steps_out, scaler_in=None, scaler_out=None): df = data.copy() cols_in_original = [col for col in cols_in] cols_in_processed = [col for col in cols_in] steps_lag = 0 if lag_data is not None and len(lag_data) &gt; 0: steps_lag = max(lag_data) for col in cols_in_original: for i, lag in enumerate(lag_data): lag_col = &#39;{0}_{1}&#39;.format(col, lag) df[lag_col] = df[col].shift(lag) cols_in_processed.append(lag_col) samples = df.shape[0] - (steps_in + steps_out + steps_lag) + 1 if samples &lt; 1: raise ValueError(&#39;not enough data to produce 1 sample.&#39;) index = list(df.index) cols_in_indices = {name: i for i, name in enumerate(cols_in_processed)} cols_out_indices = {name: i for i, name in enumerate(cols_out)} df.reset_index(inplace=True) X_input_scaled = None if scaler_in is None: scaler_in = skpl.Pipeline([ (&#39;std&#39;, skp.StandardScaler()), (&#39;minmax&#39;, skp.MinMaxScaler(feature_range=(-1, 1)))]) X_input_scaled = scaler_in.fit_transform(df[cols_in_processed].values) else: X_input_scaled = scaler_in.transform(df[cols_in_processed].values) y_output_scaled = None if scaler_out is None: scaler_out = skpl.Pipeline([ (&#39;std&#39;, skp.StandardScaler()), (&#39;minmax&#39;, skp.MinMaxScaler(feature_range=(-1, 1)))]) y_output_scaled = scaler_out.fit_transform(df[cols_out].values) else: y_output_scaled = scaler_out.transform(df[cols_out].values) X = [] y = [] for sample in range(samples): for step_in in range(steps_in): for col_in in range(len(cols_in_processed)): X.append(X_input_scaled[sample+steps_lag+step_in, col_in]) for step_out in range(steps_out): for col_out in range(len(cols_out)): y.append(y_output_scaled[sample+steps_lag+steps_in+step_out, col_out]) X = np.array(X).reshape(samples, steps_in, len(cols_in_processed)) y = np.array(y).reshape(samples, steps_out, len(cols_out)) return X, y, index, scaler_in, scaler_out, cols_in_indices, cols_out_indices . Every intput feature (passed via the function parameter cols_in) is going to be rescalled using a scikit-learn pipeline containing first a StandardScaler and then a MinMaxScaler in order to end up with a feature range of [-1, +1] required by neural networks. . X_train, y_train, index_train, scaler_in, scaler_out, cols_in_indices_train, cols_out_indices_train = prepare_data( data=df_train, lag_data=params[&#39;lag_size&#39;], cols_in=params[&#39;features&#39;], steps_in=params[&#39;input_size&#39;], cols_out=params[&#39;features&#39;], steps_out=params[&#39;output_size&#39;]) print(&#39;X_train.shape: {0}&#39;.format(X_train.shape)) print(&#39;y_train.shape: {0}&#39;.format(y_train.shape)) . X_train.shape: (367, 52, 4) y_train.shape: (367, 13, 1) . To prepare the testing data, we need to reuse both input (variable scaler_in) and output (variable scaler_out) pipelines in order to keep data scaled in the same way. . X_test, y_test, index_test, _, _, cols_in_indices_test, cols_out_indices_test = prepare_data( data=df_test, lag_data=params[&#39;lag_size&#39;], cols_in=params[&#39;features&#39;], steps_in=params[&#39;input_size&#39;], cols_out=params[&#39;features&#39;], steps_out=params[&#39;output_size&#39;], scaler_in=scaler_in, scaler_out=scaler_out) print(&#39;X_test.shape: {0}&#39;.format(X_test.shape)) print(&#39;y_test.shape: {0}&#39;.format(y_test.shape)) . X_test.shape: (52, 52, 4) y_test.shape: (52, 13, 1) . Let&#39;s compute the entire dataset and keep the output data for visualization: . X, y, index, _, _, cols_in_indices, cols_out_indices = prepare_data( data=df, lag_data=params[&#39;lag_size&#39;], cols_in=params[&#39;features&#39;], steps_in=params[&#39;input_size&#39;], cols_out=params[&#39;features&#39;], steps_out=params[&#39;output_size&#39;], scaler_in=scaler_in, scaler_out=scaler_out) print(&#39;X.shape: {0}&#39;.format(X.shape)) print(&#39;y.shape: {0}&#39;.format(y.shape)) . X.shape: (522, 52, 4) y.shape: (522, 13, 1) . Data visualization . Let&#39;s have a look at the visual representation of the timeseries data: . mwvh.plot_time_series( title=&#39;timeseries visualization&#39;, subtitle=&#39;data preparation&#39;, name=(&#39;Input - Data Visualization{0}&#39; + &#39;Training - {1} weeks ({2} samples){0}&#39; + &#39;Testing - {3} weeks ({4} samples)&#39;).format( &#39; n&#39;, df_train.shape[0], X_train.shape[0], df_test.shape[0], X_test.shape[0]), training=df_train, testing=df_test, ylabel=&#39;feature value (y)&#39;, split=threshold_date) . Build the model . Hyperparameters space definition . We&#39;ll use RMSE as our loss function to optimize (it is required to be defined as a function that can be compiled by TensorFlow): . def rmse_tf(y_true, y_pred): return tf.cast( tf.sqrt( tf.reduce_mean( tf.square( tf.subtract( y_pred, y_true)))), dtype=tf.float32) . First, we define a model-building function. It takes an argument hp from which Keras-Tuner can sample hyperparameters: . def build_model_hp( hp, loss_fn, metrics_fn, steps_in, steps_out, n_features, n_lstm_layers, bidirectional_lstm, n_layers): # define model model = km.Sequential() layer = kl.LSTM( name=&#39;lstm_x&#39;, kernel_regularizer=kr.l2( l=hp.Float( name=&#39;lstm_x_kernel_regularizer_l2_alpha&#39;, min_value=1e-5, max_value=1e-3, default=1e-4, sampling=&#39;log&#39;)), bias_regularizer=kr.l2( l=hp.Float( name=&#39;lstm_x_bias_regularizer_l2_alpha&#39;, min_value=1e-5, max_value=1e-3, default=1e-4, sampling=&#39;log&#39;)), units=hp.Int( name=&#39;lstm_x_units&#39;, min_value=64, max_value=128, step=4), input_shape=(steps_in, n_features), dropout=hp.Float( name=&#39;lstm_x_dropout&#39;, min_value=0.45, max_value=0.55, step=0.1), return_sequences=False) if bidirectional_lstm: model.add( kl.Bidirectional( name=&#39;lstm_x_bidirectional&#39;, layer=layer, merge_mode=&#39;ave&#39;)) else: model.add(layer) model.add( kl.RepeatVector( n=steps_out)) for n_lstm in range(n_lstm_layers): layer = kl.LSTM( name=&#39;lstm_{0}&#39;.format(n_lstm), kernel_regularizer=kr.l2( l=hp.Float( name=&#39;lstm_{0}_kernel_regularizer_l2_alpha&#39;.format(n_lstm), min_value=1e-5, max_value=1e-3, default=1e-4, sampling=&#39;log&#39;)), bias_regularizer=kr.l2( l=hp.Float( name=&#39;lstm_{0}_bias_regularizer_l2_alpha&#39;.format(n_lstm), min_value=1e-5, max_value=1e-3, default=1e-4, sampling=&#39;log&#39;)), units=hp.Int( name=&#39;lstm_{0}_units&#39;.format(n_lstm), min_value=64, max_value=128, step=4), dropout=hp.Float( name=&#39;lstm_{0}_dropout&#39;.format(n_lstm), min_value=0.45, max_value=0.55, step=0.1), return_sequences=True) if bidirectional_lstm: model.add( kl.Bidirectional( name=&#39;lstm_{0}_bidirectional&#39;.format(n_lstm), layer=layer, merge_mode=&#39;ave&#39;)) else: model.add(layer) dense_dropout = hp.Float( name=&#39;dense_dropout&#39;, min_value=0.45, max_value=0.55, step=0.1) for n_layer in reversed(range(n_layers)): layer_size = (1 + n_layer) ** 2 model.add( kl.TimeDistributed( name=&#39;dense_{0}_timedistributed&#39;.format(n_layer), layer=kl.Dense( name=&#39;dense_{0}&#39;.format(n_layer), activation=&#39;tanh&#39;, kernel_regularizer=kr.l2( l=hp.Float( name=&#39;dense_{0}_kernel_regularizer_l2_alpha&#39;.format(n_layer), min_value=1e-5, max_value=1e-3, default=1e-4, sampling=&#39;log&#39;)), bias_regularizer=kr.l2( l=hp.Float( name=&#39;dense_{0}_bias_regularizer_l2_alpha&#39;.format(n_layer), min_value=1e-5, max_value=1e-3, default=1e-4, sampling=&#39;log&#39;)), units=hp.Int( name=&#39;dense_{0}_units&#39;.format(n_layer), min_value=8*layer_size, max_value=16*layer_size, step=2*layer_size)))) model.add( kl.Dropout( name=&#39;dense_{0}_dropout&#39;.format(n_layer), rate=dense_dropout)) model.add( kl.TimeDistributed( name=&#39;dense_output_timedistributed&#39;, layer=kl.Dense( name=&#39;dense_output&#39;, kernel_regularizer=kr.l2( l=hp.Float( name=&#39;dense_output_kernel_regularizer_l2_alpha&#39;, min_value=1e-5, max_value=1e-3, default=1e-4, sampling=&#39;log&#39;)), bias_regularizer=kr.l2( l=hp.Float( name=&#39;dense_output_bias_regularizer_l2_alpha&#39;, min_value=1e-5, max_value=1e-3, default=1e-4, sampling=&#39;log&#39;)), activation=&#39;linear&#39;, units=1))) model.compile( loss=loss_fn, metrics=metrics_fn, optimizer=ko.Adam( learning_rate=hp.Float( name=&#39;learning_rate&#39;, min_value=1e-5, max_value=1e-3, default=1e-4, sampling=&#39;log&#39;))) return model . It is required to define a partial wrapping the build-function to ensure the signature matches the Keras-Tuner expectations: . build_model = partial( build_model_hp, loss_fn=rmse_tf, metrics_fn=None, steps_in=params[&#39;input_size&#39;], steps_out=params[&#39;output_size&#39;], n_features=len(params[&#39;features&#39;]), n_lstm_layers=1, bidirectional_lstm=True, n_layers=2) . We can create an Hyperband tuner to do the hyperparameter search. The main objective is to minimize the validation loss. . tuner = ktt.Hyperband( build_model, project_name=params[&#39;experiment_name&#39;], directory=&#39;.tuner&#39;, objective=&#39;val_loss&#39;, allow_new_entries=True, tune_new_entries=True, hyperband_iterations=params[&#39;hyperband_iterations&#39;], max_epochs=params[&#39;max_epochs&#39;]) . Default model analysis . We can start by evaluating a default model, i.e. a model for which all hyperparameters are set to their default value. As we did not specified a default value for all hyperparameters in the build_model_hp function, for such ones their min value will be used instead. To create a default model we just need to pass a fresh kte.hyperparameters.HyperParameters() class instance to the buildfunction. . default_model = tuner.hypermodel.build( kte.hyperparameters.HyperParameters()) . Let&#39;s fit this model using the data we loaded earlier: . default_history = default_model.fit( x=X_train, y=y_train, shuffle=True, batch_size=params[&#39;batch_size&#39;], validation_data=(X_test, y_test), epochs=params[&#39;max_epochs&#39;], callbacks=[ kc.EarlyStopping( monitor=&#39;val_loss&#39;, patience=params[&#39;patience&#39;], verbose=1, mode=&#39;min&#39;, restore_best_weights=True), kc.TerminateOnNaN() ], verbose=2) . We can save this default model and use the Netron application to create a visual representation of it. . default_model.save( &#39;./.models/{0}_default.h5&#39;.format( params[&#39;experiment_name&#39;])) . And here is a visual plot of the model made using the Netron application. . . Here is a text version of the model&#39;s architecture made with Keras itself. . default_model.summary( line_length=120) . Model: &#34;sequential&#34; ________________________________________________________________________________________________________________________ Layer (type) Output Shape Param # ======================================================================================================================== lstm_x_bidirectional (Bidirectional) (None, 64) 35328 ________________________________________________________________________________________________________________________ repeat_vector (RepeatVector) (None, 13, 64) 0 ________________________________________________________________________________________________________________________ lstm_0_bidirectional (Bidirectional) (None, 13, 64) 66048 ________________________________________________________________________________________________________________________ dense_1_timedistributed (TimeDistributed) (None, 13, 32) 2080 ________________________________________________________________________________________________________________________ dense_1_dropout (Dropout) (None, 13, 32) 0 ________________________________________________________________________________________________________________________ dense_0_timedistributed (TimeDistributed) (None, 13, 8) 264 ________________________________________________________________________________________________________________________ dense_0_dropout (Dropout) (None, 13, 8) 0 ________________________________________________________________________________________________________________________ dense_output_timedistributed (TimeDistributed) (None, 13, 1) 9 ======================================================================================================================== Total params: 103,729 Trainable params: 103,729 Non-trainable params: 0 ________________________________________________________________________________________________________________________ . We can see the optimization process on the chart below. . def plot_model_history(history): &#39;&#39;&#39; Summarizes the history for all loss functions, throughout the epochs. &#39;&#39;&#39; for fn in list(history.history.keys()): plt.plot(history.history[fn]) plt.title(&#39;Model loss&#39;) plt.ylabel(&#39;loss&#39;) plt.xlabel(&#39;epoch&#39;) plt.legend(list(history.history.keys()), loc=&#39;upper right&#39;) plt.show() . plot_model_history(history=default_history) . Let&#39;s zoom in and focus on the last 4 years of data. . ending_window_nb = 4*params[&#39;testing_size&#39;] ending_window_size = dt.timedelta(weeks=ending_window_nb) . We need few functions to compute the various model scores. . def score(loss_fn, y_true, y_pred): if loss_fn == &#39;RMSE&#39;: return skme.mean_squared_error( y_true=y_true, y_pred=y_pred, squared=False) elif loss_fn == &#39;MSLE&#39;: return skme.mean_squared_log_error( y_true=y_true, y_pred=y_pred) elif loss_fn == &#39;MSE&#39;: return skme.mean_squared_error( y_true=y_true, y_pred=y_pred, squared=True) elif loss_fn == &#39;R2&#39;: return skme.r2_score( y_true=y_true, y_pred=y_pred) elif loss_fn == &#39;MAE&#39;: return skme.mean_absolute_error( y_true=y_true, y_pred=y_pred) elif loss_fn == &#39;MAPE&#39;: return skme.mean_absolute_percentage_error( y_true=y_true, y_pred=y_pred) . We can process de predicted values returned by the model. The model sequencialy produces params[&#39;output_size&#39;] data points (i.e. the number of weeks of data points predicted). Predictions will enventually overlap, so we can use the mean function to get a good candidate of the current value. Similarly, the min and the max will provide a convenient confidence interval. . def process_predictions(data, X, y, scaler_out, model): data_pre = data.copy() scores = [] predictions = [] score_functions = [&#39;RMSE&#39;, &#39;MSE&#39;, &#39;R2&#39;, &#39;MAE&#39;, &#39;MAPE&#39;] lag_data = params[&#39;lag_size&#39;] steps_lag = 0 if lag_data is not None and len(lag_data) &gt; 0: steps_lag = max(lag_data) y_preds = model.predict( x=X, batch_size=params[&#39;batch_size&#39;], verbose=0) y_true_array = [] y_pred_array = [] for i in range(y.shape[0]): t_score = {} y_true = scaler_out.inverse_transform(y[i]) y_pred = scaler_out.inverse_transform(y_preds[i]) y_true_array.append(y_true) y_pred_array.append(y_pred) for score_function in score_functions: t_score[score_function] = score( score_function, y_true, y_pred) scores.append(t_score) prediction = [np.nan] * data_pre.shape[0] for j in range(len(y_true)): position = steps_lag + i + j + params[&#39;input_size&#39;] prediction[position] = y_pred[j][0] predictions.append( prediction) df_scores = pd.DataFrame.from_records(scores) data_pre[&#39;yhat_lower&#39;] = pd.DataFrame(predictions).min().values data_pre[&#39;yhat_upper&#39;] = pd.DataFrame(predictions).max().values data_pre[&#39;yhat&#39;] = pd.DataFrame(predictions).mean().values data_pre[&#39;residual&#39;] = abs(data_pre[&#39;yhat&#39;] - data_pre[&#39;y&#39;]) return data_pre, df_scores, y_true_array, y_pred_array, predictions . df_default_pre, df_default_scores, y_true_array, y_pred_array, predictions = process_predictions( data=df, X=X, y=y, scaler_out=scaler_out, model=default_model) . Test score (RMSE) for the last sample: 1667.28 Test score (MSE) for the last sample: 2779813.37 Test score (R2) for the last sample: -3.08 Test score (MAE) for the last sample: 1527.38 Test score (MAPE) for the last sample: 0.21 Average score (RMSE) for full sequence: 1505.88 Average score (MSE) for full sequence: 2585194.02 Average score (R2) for full sequence: -0.91 Average score (MAE) for full sequence: 1221.46 Average score (MAPE) for full sequence: 0.20 . df_default_scores.shape . We can see on the chart that the predictions are quite basic but still properly following the local trend as well as the seasonal variations. . mwvh.plot_time_series( title=&#39;Time Series Visualization&#39;, subtitle=&#39;default model predictions&#39;, name=(&#39;Input - Data Visualization{0}&#39; + &#39;Training - {1} weeks ({2} samples){0}&#39; + &#39;Testing - {3} weeks ({4} samples)&#39;).format( &#39; n&#39;, df_train.shape[0], X_train.shape[0], df_test.shape[0], X_test.shape[0]), training=df_train, testing=df_test, confidence=df_default_pre, confidence_label=&#39;Confidence interval&#39;, prediction=df_default_pre, residual=df_default_pre, residual_label=&#39;Residual error&#39;, ylabel=&#39;feature value (y)&#39;, split=threshold_date, window_size=ending_window_size) . Hyperparamters tuning . Keras-Tuner comes with an efficient Hyperband tuner that can search and find the optimized set of parameters. Let&#39;s try and find a better model than the default one. . We need this class to clear cell output after each trial: . class ClearTrainingOutput(kc.Callback): def on_train_end(*args, **kwargs): ids.clear_output(wait=True) . We can performs a search for best hyperparameters configuration. . tuner.search( x=X_train, y=y_train, shuffle=True, batch_size=params[&#39;batch_size&#39;], validation_data=(X_test, y_test), epochs=params[&#39;max_epochs&#39;], callbacks=[ ClearTrainingOutput(), kc.EarlyStopping( monitor=&#39;val_loss&#39;, patience=params[&#39;patience&#39;], verbose=1, mode=&#39;min&#39;, restore_best_weights=True), kc.TerminateOnNaN() ], verbose=2) . Trial 760 Complete [00h 00m 21s] val_loss: 0.3335384726524353 Best val_loss So Far: 0.14798474311828613 Total elapsed time: 05h 20m 47s Search: Running Trial #761 Hyperparameter |Value |Best Value So Far lstm_x_kernel_r...|0.00011301 |2.2768e-05 lstm_x_bias_reg...|5.4768e-05 |6.4254e-05 lstm_x_units |124 |108 lstm_x_dropout |0.55 |0.45 lstm_0_kernel_r...|1.1672e-05 |1.108e-05 lstm_0_bias_reg...|8.44e-05 |4.3426e-05 lstm_0_units |104 |68 lstm_0_dropout |0.55 |0.45 dense_dropout |0.45 |0.45 dense_1_kernel_...|2.7535e-05 |0.00015737 dense_1_bias_re...|6.6415e-05 |4.2752e-05 dense_1_units |48 |32 dense_0_kernel_...|1.661e-05 |2.0428e-05 dense_0_bias_re...|1.1889e-05 |1.9485e-05 dense_0_units |8 |10 dense_output_ke...|0.00034768 |9.8763e-05 dense_output_bi...|1.8061e-05 |2.1872e-05 learning_rate |6.5632e-05 |0.0009134 tuner/epochs |2 |250 tuner/initial_e...|0 |84 tuner/bracket |5 |2 tuner/round |0 |2 Epoch 1/2 . We can print out the results summary: . tuner.results_summary(num_trials=1) . And we can retrieve the best hyperparameters configuration: . best_params = tuner.get_best_hyperparameters(num_trials=1)[0] . Which we can use to build the model with the best hyperparameters configuration: . model = tuner.hypermodel.build(best_params) . Let&#39;s fit this model using the training data used during the search: . history = model.fit( x=X_train, y=y_train, shuffle=True, batch_size=params[&#39;batch_size&#39;], validation_data=(X_test, y_test), epochs=params[&#39;max_epochs&#39;], callbacks=[ kc.EarlyStopping( monitor=&#39;val_loss&#39;, patience=params[&#39;patience&#39;], verbose=1, mode=&#39;min&#39;, restore_best_weights=True), kc.TerminateOnNaN() ], verbose=2) . It is a good time to save our model for future use: . model.save( &#39;./.models/{0}.h5&#39;.format( params[&#39;experiment_name&#39;])) . plot_model_history(history=history) . Here are our model scores. . df_pre, df_scores = process_predictions( data=df, X=X, y=y, scaler_out=scaler_out, model=model) . We can plot the predictions we&#39;ve made with our optimized model. . mwvh.plot_time_series( title=&#39;timeseries visualization&#39;, subtitle=&#39;data preparation&#39;, name=(&#39;Input - Data Visualization{0}&#39; + &#39;Training - {1} weeks ({2} samples){0}&#39; + &#39;Testing - {3} weeks ({4} samples)&#39;).format( &#39; n&#39;, df_train.shape[0], X_train.shape[0], df_test.shape[0], X_test.shape[0]), training=df_train, testing=df_test, confidence=df_pre, prediction=df_pre, residual=df_pre, ylabel=&#39;feature value (y)&#39;, split=threshold_date, window_size=ending_window_size) .",
            "url": "https://braibaud.github.io/blog/lstm/keras/keras%20tuner/python/machine%20learning/timeseries/2021/05/31/LSTM-timeseries-forecasting-with-Keras-Tuner.html",
            "relUrl": "/lstm/keras/keras%20tuner/python/machine%20learning/timeseries/2021/05/31/LSTM-timeseries-forecasting-with-Keras-Tuner.html",
            "date": " • May 31, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hi there 👋 . I am currently working as Data Science Lead EMEA in Geneva, Switzerland. . My Software Projects . Related to Data Science: . PWML: Python 3 library useful for training hierarchical classification models on top of scikit-learn. It also contains a tons of useful helpers for both results representation as well as experiments management using Neptune. Deployed on Pypi. | . | Related to Space Exploration: . Nasa Rover Images: A Python project for easing rover images download and images post-processing (e.g. debayering). This is also the place where I post stitched and post-processed images (Python 3 + Jupyter based). | . | Related to Home-Assistant: . AirThings Integration: Home Assistant custom component for the AirThings platform integration (Python 3 based). | AirThings API: Python Wrappers for AirThings public dashboard API (Python 3 based). Deployed on PyPi. | . | Other Projects: . ParallelExecution: A SQL Server solution for parallelizing SQL Server commands (.NET C# based). | . | . My Statistics . .",
          "url": "https://braibaud.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://braibaud.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}