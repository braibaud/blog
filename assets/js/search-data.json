{
  
    
        "post0": {
            "title": "Using conda environments the right way",
            "content": "About . We are going to pull data from a webservice, transform it and serve it back via a webservice. . . Procedure . install anaconda.install in user mode and not in admin mode. . | start the Anaconda Prompt (anaconda3) using start menu.this should automatically activate the base environment. . | create a conda environment named (for example) data-science-env.conda create --name data-science-env python=3.8 . | activate the conda environment.conda activate data-science-env . | install any required package using conda or pip.pip install scikit-learn or conda install scikit-learn . | create a notebook kernel connected with the conda environment just created.python -m ipykernel install --user --name data-science-env --display-name data-science-env-kernel . | use the base environment to start jupyter-notebook or jupyter-lab.You should find a kernel named data-science-env-kernel. . |",
            "url": "https://braibaud.github.io/blog/python/conda/environment/2021/06/08/Using-conda-environments-the-right-way.html",
            "relUrl": "/python/conda/environment/2021/06/08/Using-conda-environments-the-right-way.html",
            "date": " • Jun 8, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Exposing API data via Flask",
            "content": "About . We are going to pull data from a webservice, transform it and serve it back via a webservice. . . The required libraries . import airbnb as ab import pandas as pd import locale as lo import argparse as ap import traceback as tb import os as os import functools as ft from dateutil import parser as dtp . As we&#39;ll expose webservice endpoints, we should import the following flask elements. . Those elements can be installed using pip install flask flask-restful flask-wtf flask-cors . import flask as fl import flask_restful as flr import flask_restful.reqparse as flr_r import flask_cors as flc import flask_wtf.csrf as flwc . Get data from Airbnb API . Let&#39;s pull reviews and rating information from Airbnb for a given listing_id (a property available to rent on Airbnb). . def get_reviews( listing_id, locale=&#39;fr&#39;, page_size=50, keep_n_reviews=10, min_rating=3, most_recent_first=True): api = ab.api.Api(randomize=True) api._session.headers[&#39;x-airbnb-locale&#39;] = locale api._session.headers[&#39;accept-language&#39;] = locale lo.setlocale(lo.LC_ALL, locale) reviews = [] offset = 0 reviews_count = 0 has_more_reviews = True reviews_count = -1 while has_more_reviews: page_reviews = api.get_reviews( listing_id=listing_id, offset=offset, limit=page_size) for review in page_reviews[&#39;reviews&#39;]: review[&#39;created_at__dt&#39;] = dtp.parse(review[&#39;created_at&#39;]) reviews.append(review) reviews_count = page_reviews[&#39;metadata&#39;][&#39;reviews_count&#39;] if len(page_reviews[&#39;reviews&#39;]) &lt; page_size: has_more_reviews = False else: offset += page_size if min_rating is not None: reviews = [x for x in reviews if x[&#39;rating&#39;] &gt;= min_rating] def compare_reviews(left, right, most_recent_first=most_recent_first): if most_recent_first: if left[&#39;created_at__dt&#39;] &lt; right[&#39;created_at__dt&#39;]: return 1 elif left[&#39;created_at__dt&#39;] == right[&#39;created_at__dt&#39;]: return 0 elif left[&#39;created_at__dt&#39;] &gt; right[&#39;created_at__dt&#39;]: return -1 reviews = sorted( reviews, key=ft.cmp_to_key(compare_reviews)) if keep_n_reviews &gt; 0: reviews = reviews[:keep_n_reviews] return reviews . def get_listing_details( listing_id, locale=&#39;fr&#39;): api = ab.api.Api(randomize=True) api._session.headers[&#39;x-airbnb-locale&#39;] = locale api._session.headers[&#39;accept-language&#39;] = locale lo.setlocale(lo.LC_ALL, locale) url_base = ab.api.API_URL r = api._session.get( &#39;{0}/pdp_listing_details/{1}&#39;.format( url_base, listing_id), params={ &#39;_format&#39;: &#39;for_rooms_show&#39;}) r.raise_for_status() return r.json() . def get_ratings( listing_id, locale=&#39;fr&#39;, keep_n_reviews=10, min_rating=3, most_recent_first=True): listing_details = get_listing_details( listing_id=listing_id, locale=locale) reviews = get_reviews( listing_id=listing_id, locale=locale, keep_n_reviews=keep_n_reviews, min_rating=min_rating, most_recent_first=most_recent_first) overall_rating_text = listing_details[&#39;pdp_listing_detail&#39;][&#39;reviews_module&#39;][&#39;localized_overall_rating&#39;] overall_rating_terms = listing_details[&#39;pdp_listing_detail&#39;][&#39;reviews_module&#39;][&#39;appreciation_tags&#39;] review_details = listing_details[&#39;pdp_listing_detail&#39;][&#39;review_details_interface&#39;] overall_rating = lo.atof(overall_rating_text) review_count = review_details[&#39;review_count&#39;] review_summary = review_details[&#39;review_summary&#39;] for summary in review_summary: summary[&#39;rating&#39;] = lo.atof(summary[&#39;localized_rating&#39;]) return { &#39;overall_rating&#39;: overall_rating, &#39;review_count&#39;: review_count, &#39;categories&#39;: review_summary, &#39;rating_terms&#39;: overall_rating_terms, &#39;reviews&#39;: reviews } . We can get the individual reviews by calling the get_reviews function defiend above: . listing_id = 36902451 . get_ratings(listing_id=listing_id, keep_n_reviews=10) . {&#39;accept&#39;: &#39;application/json&#39;, &#39;accept-encoding&#39;: &#39;br, gzip, deflate&#39;, &#39;content-type&#39;: &#39;application/json&#39;, &#39;x-airbnb-api-key&#39;: &#39;915pw2pnf4h1aiguhph5gc5b2&#39;, &#39;user-agent&#39;: &#39;Airbnb/17.13 iPhone/10.3.1 Type/Phone&#39;, &#39;x-airbnb-screensize&#39;: &#39;w=375.00;h=812.00&#39;, &#39;x-airbnb-carrier-name&#39;: &#39;T-Mobile&#39;, &#39;x-airbnb-network-type&#39;: &#39;wifi&#39;, &#39;x-airbnb-currency&#39;: &#39;USD&#39;, &#39;x-airbnb-locale&#39;: &#39;fr&#39;, &#39;x-airbnb-carrier-country&#39;: &#39;us&#39;, &#39;accept-language&#39;: &#39;fr&#39;, &#39;airbnb-device-id&#39;: &#39;9a9092886fafc1b44f13c1a26cbb9ae0b1207e4c&#39;, &#39;x-airbnb-advertising-id&#39;: &#39;09A2B1E9-278F-4E1C-9159-5659F82D890B&#39;} . {&#39;overall_rating&#39;: 4.97, &#39;review_count&#39;: 31, &#39;categories&#39;: [{&#39;category&#39;: &#39;accuracy&#39;, &#39;value&#39;: 10, &#39;label&#39;: &#39;Précision&#39;, &#39;localized_rating&#39;: &#39;5,0&#39;, &#39;percentage&#39;: 1.0, &#39;rating&#39;: 5.0}, {&#39;category&#39;: &#39;communication&#39;, &#39;value&#39;: 10, &#39;label&#39;: &#39;Communication&#39;, &#39;localized_rating&#39;: &#39;5,0&#39;, &#39;percentage&#39;: 1.0, &#39;rating&#39;: 5.0}, {&#39;category&#39;: &#39;cleanliness&#39;, &#39;value&#39;: 10, &#39;label&#39;: &#39;Propreté&#39;, &#39;localized_rating&#39;: &#39;5,0&#39;, &#39;percentage&#39;: 0.994, &#39;rating&#39;: 5.0}, {&#39;category&#39;: &#39;location&#39;, &#39;value&#39;: 10, &#39;label&#39;: &#39;Emplacement&#39;, &#39;localized_rating&#39;: &#39;5,0&#39;, &#39;percentage&#39;: 1.0, &#39;rating&#39;: 5.0}, {&#39;category&#39;: &#39;checkin&#39;, &#39;value&#39;: 10, &#39;label&#39;: &#39;Arrivée&#39;, &#39;localized_rating&#39;: &#39;5,0&#39;, &#39;percentage&#39;: 1.0, &#39;rating&#39;: 5.0}, {&#39;category&#39;: &#39;value&#39;, &#39;value&#39;: 10, &#39;label&#39;: &#39;Qualité-prix&#39;, &#39;localized_rating&#39;: &#39;5,0&#39;, &#39;percentage&#39;: 0.994, &#39;rating&#39;: 5.0}], &#39;rating_terms&#39;: [{&#39;localized_text&#39;: &#39;Propreté impeccable&#39;, &#39;localized_count_string&#39;: &#39;15&#39;, &#39;icon&#39;: &#39;IconIndicatorTub&#39;}, {&#39;localized_text&#39;: &#39;Hospitalité unique&#39;, &#39;localized_count_string&#39;: &#39;13&#39;, &#39;icon&#39;: &#39;IconIndicatorHeart&#39;}, {&#39;localized_text&#39;: &#39;Réactivité&#39;, &#39;localized_count_string&#39;: &#39;11&#39;, &#39;icon&#39;: &#39;IconIndicatorChatBubble&#39;}, {&#39;localized_text&#39;: &#39;Déco et design&#39;, &#39;localized_count_string&#39;: &#39;7&#39;, &#39;icon&#39;: &#39;IconIndicatorInterior&#39;}, {&#39;localized_text&#39;: &#39;Équipements exceptionnels&#39;, &#39;localized_count_string&#39;: &#39;6&#39;, &#39;icon&#39;: &#39;IconIndicatorCup&#39;}], &#39;reviews&#39;: [{&#39;author&#39;: {&#39;first_name&#39;: &#39;Camille&#39;, &#39;has_profile_pic&#39;: True, &#39;id&#39;: 8054257, &#39;picture_url&#39;: &#39;https://a0.muscache.com/im/pictures/user/da31231b-666d-4167-a02e-9e619c0dc22c.jpg?aki_policy=profile_x_medium&#39;, &#39;smart_name&#39;: &#39;Camille&#39;, &#39;thumbnail_url&#39;: &#39;https://a0.muscache.com/im/pictures/user/da31231b-666d-4167-a02e-9e619c0dc22c.jpg?aki_policy=profile_small&#39;}, &#39;author_id&#39;: 8054257, &#39;can_be_edited&#39;: False, &#39;comments&#39;: &#39;Je recommande vivement cet appartement. Très bien situé dans Chamonix, un appartement fonctionnel et propre, avec une très belle vue sur le Mont-Blanc. Patricia et Thierry sont très accueillants, arrangeants et disponibles. J’y retournerai sans hésitation!&#39;, &#39;created_at&#39;: &#39;2021-04-03T11:33:57Z&#39;, &#39;id&#39;: 744854651, &#39;id_str&#39;: &#39;744854651&#39;, &#39;listing_id&#39;: 36902451, &#39;recipient_id&#39;: 251507728, &#39;collection_tag&#39;: None, &#39;listing&#39;: {&#39;id&#39;: 36902451, &#39;listing_id_str&#39;: &#39;36902451&#39;, &#39;name&#39;: &#39;Duplex spacieux et lumineux au centre de Chamonix&#39;}, &#39;rating&#39;: 5, &#39;recipient&#39;: {&#39;first_name&#39;: &#39;Patricia &amp; Thierry&#39;, &#39;has_profile_pic&#39;: True, &#39;id&#39;: 251507728, &#39;picture_url&#39;: &#39;https://a0.muscache.com/im/pictures/user/2cfba405-b621-42b6-8d58-4bf53055f5e2.jpg?aki_policy=profile_x_medium&#39;, &#39;smart_name&#39;: &#39;Patricia &amp; Thierry&#39;, &#39;thumbnail_url&#39;: &#39;https://a0.muscache.com/im/pictures/user/2cfba405-b621-42b6-8d58-4bf53055f5e2.jpg?aki_policy=profile_small&#39;}, &#39;response&#39;: &#39;&#39;, &#39;role&#39;: &#39;guest&#39;, &#39;language&#39;: &#39;fr&#39;, &#39;user_flag&#39;: None, &#39;created_at__dt&#39;: datetime.datetime(2021, 4, 3, 11, 33, 57, tzinfo=tzutc())}, {&#39;author&#39;: {&#39;first_name&#39;: &#39;Nicolas&#39;, &#39;has_profile_pic&#39;: False, &#39;id&#39;: 392379609, &#39;picture_url&#39;: &#39;https://a0.muscache.com/defaults/user_pic-225x225.png?v=3&#39;, &#39;smart_name&#39;: &#39;Nicolas&#39;, &#39;thumbnail_url&#39;: &#39;https://a0.muscache.com/defaults/user_pic-50x50.png?v=3&#39;}, &#39;author_id&#39;: 392379609, &#39;can_be_edited&#39;: False, &#39;comments&#39;: &#39;Un appartement bien agencé très propre et proche du centre ville. Les propriétaires sont également réactifs et très sympathique. Je recommande vivement &#39;, &#39;created_at&#39;: &#39;2021-03-20T12:59:02Z&#39;, &#39;id&#39;: 740510018, &#39;id_str&#39;: &#39;740510018&#39;, &#39;listing_id&#39;: 36902451, &#39;recipient_id&#39;: 251507728, &#39;collection_tag&#39;: None, &#39;listing&#39;: {&#39;id&#39;: 36902451, &#39;listing_id_str&#39;: &#39;36902451&#39;, &#39;name&#39;: &#39;Duplex spacieux et lumineux au centre de Chamonix&#39;}, &#39;rating&#39;: 5, &#39;recipient&#39;: {&#39;first_name&#39;: &#39;Patricia &amp; Thierry&#39;, &#39;has_profile_pic&#39;: True, &#39;id&#39;: 251507728, &#39;picture_url&#39;: &#39;https://a0.muscache.com/im/pictures/user/2cfba405-b621-42b6-8d58-4bf53055f5e2.jpg?aki_policy=profile_x_medium&#39;, &#39;smart_name&#39;: &#39;Patricia &amp; Thierry&#39;, &#39;thumbnail_url&#39;: &#39;https://a0.muscache.com/im/pictures/user/2cfba405-b621-42b6-8d58-4bf53055f5e2.jpg?aki_policy=profile_small&#39;}, &#39;response&#39;: &#39;&#39;, &#39;role&#39;: &#39;guest&#39;, &#39;language&#39;: &#39;fr&#39;, &#39;user_flag&#39;: None, &#39;created_at__dt&#39;: datetime.datetime(2021, 3, 20, 12, 59, 2, tzinfo=tzutc())}, {&#39;author&#39;: {&#39;first_name&#39;: &#39;Hélène&#39;, &#39;has_profile_pic&#39;: True, &#39;id&#39;: 76814860, &#39;picture_url&#39;: &#39;https://a0.muscache.com/im/pictures/user/95109087-2760-4977-af7b-643eac2e69b4.jpg?aki_policy=profile_x_medium&#39;, &#39;smart_name&#39;: &#39;Hélène&#39;, &#39;thumbnail_url&#39;: &#39;https://a0.muscache.com/im/pictures/user/95109087-2760-4977-af7b-643eac2e69b4.jpg?aki_policy=profile_small&#39;}, &#39;author_id&#39;: 76814860, &#39;can_be_edited&#39;: False, &#39;comments&#39;: &#39;Logement correct. Il est idéalement situé. Rue piétonne avec tous commerces à 5 min. Résidence très calme. La vue du Mont Blanc et aiguille du midi depuis le balcon est magnifique.&#39;, &#39;created_at&#39;: &#39;2021-03-13T13:53:02Z&#39;, &#39;id&#39;: 738497725, &#39;id_str&#39;: &#39;738497725&#39;, &#39;listing_id&#39;: 36902451, &#39;recipient_id&#39;: 251507728, &#39;collection_tag&#39;: None, &#39;listing&#39;: {&#39;id&#39;: 36902451, &#39;listing_id_str&#39;: &#39;36902451&#39;, &#39;name&#39;: &#39;Duplex spacieux et lumineux au centre de Chamonix&#39;}, &#39;rating&#39;: 4, &#39;recipient&#39;: {&#39;first_name&#39;: &#39;Patricia &amp; Thierry&#39;, &#39;has_profile_pic&#39;: True, &#39;id&#39;: 251507728, &#39;picture_url&#39;: &#39;https://a0.muscache.com/im/pictures/user/2cfba405-b621-42b6-8d58-4bf53055f5e2.jpg?aki_policy=profile_x_medium&#39;, &#39;smart_name&#39;: &#39;Patricia &amp; Thierry&#39;, &#39;thumbnail_url&#39;: &#39;https://a0.muscache.com/im/pictures/user/2cfba405-b621-42b6-8d58-4bf53055f5e2.jpg?aki_policy=profile_small&#39;}, &#39;response&#39;: &#39;&#39;, &#39;role&#39;: &#39;guest&#39;, &#39;language&#39;: &#39;fr&#39;, &#39;user_flag&#39;: None, &#39;created_at__dt&#39;: datetime.datetime(2021, 3, 13, 13, 53, 2, tzinfo=tzutc())}, {&#39;author&#39;: {&#39;first_name&#39;: &#39;Sarah&#39;, &#39;has_profile_pic&#39;: False, &#39;id&#39;: 140066313, &#39;picture_url&#39;: &#39;https://a0.muscache.com/defaults/user_pic-225x225.png?v=3&#39;, &#39;smart_name&#39;: &#39;Sarah&#39;, &#39;thumbnail_url&#39;: &#39;https://a0.muscache.com/defaults/user_pic-50x50.png?v=3&#39;}, &#39;author_id&#39;: 140066313, &#39;can_be_edited&#39;: False, &#39;comments&#39;: &#39;Conforme à la description nAppartement et hôtes agréables, bel emplacement&#39;, &#39;created_at&#39;: &#39;2021-02-27T14:17:39Z&#39;, &#39;id&#39;: 734709492, &#39;id_str&#39;: &#39;734709492&#39;, &#39;listing_id&#39;: 36902451, &#39;recipient_id&#39;: 251507728, &#39;collection_tag&#39;: None, &#39;listing&#39;: {&#39;id&#39;: 36902451, &#39;listing_id_str&#39;: &#39;36902451&#39;, &#39;name&#39;: &#39;Duplex spacieux et lumineux au centre de Chamonix&#39;}, &#39;rating&#39;: 5, &#39;recipient&#39;: {&#39;first_name&#39;: &#39;Patricia &amp; Thierry&#39;, &#39;has_profile_pic&#39;: True, &#39;id&#39;: 251507728, &#39;picture_url&#39;: &#39;https://a0.muscache.com/im/pictures/user/2cfba405-b621-42b6-8d58-4bf53055f5e2.jpg?aki_policy=profile_x_medium&#39;, &#39;smart_name&#39;: &#39;Patricia &amp; Thierry&#39;, &#39;thumbnail_url&#39;: &#39;https://a0.muscache.com/im/pictures/user/2cfba405-b621-42b6-8d58-4bf53055f5e2.jpg?aki_policy=profile_small&#39;}, &#39;response&#39;: &#39;&#39;, &#39;role&#39;: &#39;guest&#39;, &#39;language&#39;: &#39;fr&#39;, &#39;user_flag&#39;: None, &#39;created_at__dt&#39;: datetime.datetime(2021, 2, 27, 14, 17, 39, tzinfo=tzutc())}, {&#39;author&#39;: {&#39;first_name&#39;: &#39;Anne&#39;, &#39;has_profile_pic&#39;: True, &#39;id&#39;: 102697326, &#39;picture_url&#39;: &#39;https://a0.muscache.com/im/pictures/user/a3cc14bc-4011-461d-b371-05ccef564024.jpg?aki_policy=profile_x_medium&#39;, &#39;smart_name&#39;: &#39;Anne&#39;, &#39;thumbnail_url&#39;: &#39;https://a0.muscache.com/im/pictures/user/a3cc14bc-4011-461d-b371-05ccef564024.jpg?aki_policy=profile_small&#39;}, &#39;author_id&#39;: 102697326, &#39;can_be_edited&#39;: False, &#39;comments&#39;: &#39;L’appartement de Patricia et Thierry nous a beaucoup plu ! Il est idéalement situé à 5min à pied du centre ville et de la gare Chamonix Aiguille du midi. Il est très propre, la cuisine est bien équipée et l’étage pour le coin nuit avec sdb est très apprécié. Et quelle vue sur le massif du Mont Blanc !! nNous remercions Thierry pour sa réactivité. nNous reviendrons sans hésiter en hiver comme en été!&#39;, &#39;created_at&#39;: &#39;2021-02-21T14:15:02Z&#39;, &#39;id&#39;: 733162436, &#39;id_str&#39;: &#39;733162436&#39;, &#39;listing_id&#39;: 36902451, &#39;recipient_id&#39;: 251507728, &#39;collection_tag&#39;: None, &#39;listing&#39;: {&#39;id&#39;: 36902451, &#39;listing_id_str&#39;: &#39;36902451&#39;, &#39;name&#39;: &#39;Duplex spacieux et lumineux au centre de Chamonix&#39;}, &#39;rating&#39;: 5, &#39;recipient&#39;: {&#39;first_name&#39;: &#39;Patricia &amp; Thierry&#39;, &#39;has_profile_pic&#39;: True, &#39;id&#39;: 251507728, &#39;picture_url&#39;: &#39;https://a0.muscache.com/im/pictures/user/2cfba405-b621-42b6-8d58-4bf53055f5e2.jpg?aki_policy=profile_x_medium&#39;, &#39;smart_name&#39;: &#39;Patricia &amp; Thierry&#39;, &#39;thumbnail_url&#39;: &#39;https://a0.muscache.com/im/pictures/user/2cfba405-b621-42b6-8d58-4bf53055f5e2.jpg?aki_policy=profile_small&#39;}, &#39;response&#39;: &#39;&#39;, &#39;role&#39;: &#39;guest&#39;, &#39;language&#39;: &#39;fr&#39;, &#39;user_flag&#39;: None, &#39;created_at__dt&#39;: datetime.datetime(2021, 2, 21, 14, 15, 2, tzinfo=tzutc())}, {&#39;author&#39;: {&#39;first_name&#39;: &#39;Philippe&#39;, &#39;has_profile_pic&#39;: False, &#39;id&#39;: 69221950, &#39;picture_url&#39;: &#39;https://a0.muscache.com/defaults/user_pic-225x225.png?v=3&#39;, &#39;smart_name&#39;: &#39;Philippe&#39;, &#39;thumbnail_url&#39;: &#39;https://a0.muscache.com/defaults/user_pic-50x50.png?v=3&#39;}, &#39;author_id&#39;: 69221950, &#39;can_be_edited&#39;: False, &#39;comments&#39;: &#39;Patricia très sympathique accueillante et disponible. Appartement correspondant à la description faite. Neuf, très propre décoration de bon goût. Vue sur le Mont Blanc, avec un parking en sous-sol apprécié. Je le recommande.&#39;, &#39;created_at&#39;: &#39;2021-01-30T14:30:16Z&#39;, &#39;id&#39;: 727631522, &#39;id_str&#39;: &#39;727631522&#39;, &#39;listing_id&#39;: 36902451, &#39;recipient_id&#39;: 251507728, &#39;collection_tag&#39;: None, &#39;listing&#39;: {&#39;id&#39;: 36902451, &#39;listing_id_str&#39;: &#39;36902451&#39;, &#39;name&#39;: &#39;Duplex spacieux et lumineux au centre de Chamonix&#39;}, &#39;rating&#39;: 5, &#39;recipient&#39;: {&#39;first_name&#39;: &#39;Patricia &amp; Thierry&#39;, &#39;has_profile_pic&#39;: True, &#39;id&#39;: 251507728, &#39;picture_url&#39;: &#39;https://a0.muscache.com/im/pictures/user/2cfba405-b621-42b6-8d58-4bf53055f5e2.jpg?aki_policy=profile_x_medium&#39;, &#39;smart_name&#39;: &#39;Patricia &amp; Thierry&#39;, &#39;thumbnail_url&#39;: &#39;https://a0.muscache.com/im/pictures/user/2cfba405-b621-42b6-8d58-4bf53055f5e2.jpg?aki_policy=profile_small&#39;}, &#39;response&#39;: &#39;&#39;, &#39;role&#39;: &#39;guest&#39;, &#39;language&#39;: &#39;fr&#39;, &#39;user_flag&#39;: None, &#39;created_at__dt&#39;: datetime.datetime(2021, 1, 30, 14, 30, 16, tzinfo=tzutc())}, {&#39;author&#39;: {&#39;first_name&#39;: &#39;Julien&#39;, &#39;has_profile_pic&#39;: True, &#39;id&#39;: 52314839, &#39;picture_url&#39;: &#39;https://a0.muscache.com/im/pictures/user/144d0a70-1778-4835-9d7f-32205a319465.jpg?aki_policy=profile_x_medium&#39;, &#39;smart_name&#39;: &#39;Julien&#39;, &#39;thumbnail_url&#39;: &#39;https://a0.muscache.com/im/pictures/user/144d0a70-1778-4835-9d7f-32205a319465.jpg?aki_policy=profile_small&#39;}, &#39;author_id&#39;: 52314839, &#39;can_be_edited&#39;: False, &#39;comments&#39;: &#39;N hésitez pas une seule seconde vous serez très bien reçu chez Patricia et Thierry. nUn accueil vraiment très chaleureux. nLe logement est très propre et extrêmement bien placé !!! nSi vous devez venir sur Chamonix c est l appartement parfait.&#39;, &#39;created_at&#39;: &#39;2021-01-23T12:25:36Z&#39;, &#39;id&#39;: 726110604, &#39;id_str&#39;: &#39;726110604&#39;, &#39;listing_id&#39;: 36902451, &#39;recipient_id&#39;: 251507728, &#39;collection_tag&#39;: None, &#39;listing&#39;: {&#39;id&#39;: 36902451, &#39;listing_id_str&#39;: &#39;36902451&#39;, &#39;name&#39;: &#39;Duplex spacieux et lumineux au centre de Chamonix&#39;}, &#39;rating&#39;: 5, &#39;recipient&#39;: {&#39;first_name&#39;: &#39;Patricia &amp; Thierry&#39;, &#39;has_profile_pic&#39;: True, &#39;id&#39;: 251507728, &#39;picture_url&#39;: &#39;https://a0.muscache.com/im/pictures/user/2cfba405-b621-42b6-8d58-4bf53055f5e2.jpg?aki_policy=profile_x_medium&#39;, &#39;smart_name&#39;: &#39;Patricia &amp; Thierry&#39;, &#39;thumbnail_url&#39;: &#39;https://a0.muscache.com/im/pictures/user/2cfba405-b621-42b6-8d58-4bf53055f5e2.jpg?aki_policy=profile_small&#39;}, &#39;response&#39;: &#39;&#39;, &#39;role&#39;: &#39;guest&#39;, &#39;language&#39;: &#39;fr&#39;, &#39;user_flag&#39;: None, &#39;created_at__dt&#39;: datetime.datetime(2021, 1, 23, 12, 25, 36, tzinfo=tzutc())}, {&#39;author&#39;: {&#39;first_name&#39;: &#39;Mohamed&#39;, &#39;has_profile_pic&#39;: True, &#39;id&#39;: 194410942, &#39;picture_url&#39;: &#39;https://a0.muscache.com/im/pictures/user/bffb8790-29d6-4bb9-bc36-2e6b76b1d48e.jpg?aki_policy=profile_x_medium&#39;, &#39;smart_name&#39;: &#39;Mohamed&#39;, &#39;thumbnail_url&#39;: &#39;https://a0.muscache.com/im/pictures/user/bffb8790-29d6-4bb9-bc36-2e6b76b1d48e.jpg?aki_policy=profile_small&#39;}, &#39;author_id&#39;: 194410942, &#39;can_be_edited&#39;: False, &#39;comments&#39;: &#34;Situé face à ce que la nature peut vous offrir de plus beau (le Mont-blanc), cet appartement chaleureux m&#39;a permis un dépaysement total. Proche de toutes commodités (transport, commerce...), mon véhicule a lui aussi, profité de l&#39;abri du garage souterrain pendant tout le séjour. Concernant mon accueil, celui-ci était au top. Patricia et Thierry ont su m&#39;accueillir chaleureusement et prendre le temps de tout m&#39;expliquer. C&#39;est un couple disponible avec une grande gentillesse. L&#39;appartement est confortable et on se lasse jamais de cette vue en prenant son café le matin. Encore merci !!!&#34;, &#39;created_at&#39;: &#39;2021-01-09T14:22:32Z&#39;, &#39;id&#39;: 722964305, &#39;id_str&#39;: &#39;722964305&#39;, &#39;listing_id&#39;: 36902451, &#39;recipient_id&#39;: 251507728, &#39;collection_tag&#39;: None, &#39;listing&#39;: {&#39;id&#39;: 36902451, &#39;listing_id_str&#39;: &#39;36902451&#39;, &#39;name&#39;: &#39;Duplex spacieux et lumineux au centre de Chamonix&#39;}, &#39;rating&#39;: 5, &#39;recipient&#39;: {&#39;first_name&#39;: &#39;Patricia &amp; Thierry&#39;, &#39;has_profile_pic&#39;: True, &#39;id&#39;: 251507728, &#39;picture_url&#39;: &#39;https://a0.muscache.com/im/pictures/user/2cfba405-b621-42b6-8d58-4bf53055f5e2.jpg?aki_policy=profile_x_medium&#39;, &#39;smart_name&#39;: &#39;Patricia &amp; Thierry&#39;, &#39;thumbnail_url&#39;: &#39;https://a0.muscache.com/im/pictures/user/2cfba405-b621-42b6-8d58-4bf53055f5e2.jpg?aki_policy=profile_small&#39;}, &#39;response&#39;: &#39;&#39;, &#39;role&#39;: &#39;guest&#39;, &#39;language&#39;: &#39;fr&#39;, &#39;user_flag&#39;: None, &#39;created_at__dt&#39;: datetime.datetime(2021, 1, 9, 14, 22, 32, tzinfo=tzutc())}, {&#39;author&#39;: {&#39;first_name&#39;: &#39;Amandine&#39;, &#39;has_profile_pic&#39;: True, &#39;id&#39;: 66366222, &#39;picture_url&#39;: &#39;https://a0.muscache.com/im/pictures/user/5fe7cb73-ffc5-4e27-ab9f-1892ad0bcc17.jpg?aki_policy=profile_x_medium&#39;, &#39;smart_name&#39;: &#39;Amandine&#39;, &#39;thumbnail_url&#39;: &#39;https://a0.muscache.com/im/pictures/user/5fe7cb73-ffc5-4e27-ab9f-1892ad0bcc17.jpg?aki_policy=profile_small&#39;}, &#39;author_id&#39;: 66366222, &#39;can_be_edited&#39;: False, &#39;comments&#39;: &#39;Super appartement conforme à l’annonce avec une superbe vue ! nUn accueil chaleureux de Patricia et Thierry, bref un super séjour !&#39;, &#39;created_at&#39;: &#39;2021-01-02T13:09:00Z&#39;, &#39;id&#39;: 720744152, &#39;id_str&#39;: &#39;720744152&#39;, &#39;listing_id&#39;: 36902451, &#39;recipient_id&#39;: 251507728, &#39;collection_tag&#39;: None, &#39;listing&#39;: {&#39;id&#39;: 36902451, &#39;listing_id_str&#39;: &#39;36902451&#39;, &#39;name&#39;: &#39;Duplex spacieux et lumineux au centre de Chamonix&#39;}, &#39;rating&#39;: 5, &#39;recipient&#39;: {&#39;first_name&#39;: &#39;Patricia &amp; Thierry&#39;, &#39;has_profile_pic&#39;: True, &#39;id&#39;: 251507728, &#39;picture_url&#39;: &#39;https://a0.muscache.com/im/pictures/user/2cfba405-b621-42b6-8d58-4bf53055f5e2.jpg?aki_policy=profile_x_medium&#39;, &#39;smart_name&#39;: &#39;Patricia &amp; Thierry&#39;, &#39;thumbnail_url&#39;: &#39;https://a0.muscache.com/im/pictures/user/2cfba405-b621-42b6-8d58-4bf53055f5e2.jpg?aki_policy=profile_small&#39;}, &#39;response&#39;: &#39;&#39;, &#39;role&#39;: &#39;guest&#39;, &#39;language&#39;: &#39;fr&#39;, &#39;user_flag&#39;: None, &#39;created_at__dt&#39;: datetime.datetime(2021, 1, 2, 13, 9, tzinfo=tzutc())}, {&#39;author&#39;: {&#39;first_name&#39;: &#39;Ally&#39;, &#39;has_profile_pic&#39;: True, &#39;id&#39;: 11287096, &#39;picture_url&#39;: &#39;https://a0.muscache.com/im/users/11287096/profile_pic/1442131015/original.jpg?aki_policy=profile_x_medium&#39;, &#39;smart_name&#39;: &#39;Ally&#39;, &#39;thumbnail_url&#39;: &#39;https://a0.muscache.com/im/users/11287096/profile_pic/1442131015/original.jpg?aki_policy=profile_small&#39;}, &#39;author_id&#39;: 11287096, &#39;can_be_edited&#39;: False, &#39;comments&#39;: &#34;Excellent place to spend my first month in Chamonix; Patricia and Thierry were extremely helpful and responsive; the apartment is as described; the location is excellent; the view from the balcony is stunning; everything is clean and works properly; internet was fine for work video-conferences, etc; I couldn&#39;t have been happier with this choice :-)&#34;, &#39;created_at&#39;: &#39;2020-11-18T13:48:57Z&#39;, &#39;id&#39;: 709710631, &#39;id_str&#39;: &#39;709710631&#39;, &#39;listing_id&#39;: 36902451, &#39;recipient_id&#39;: 251507728, &#39;collection_tag&#39;: None, &#39;listing&#39;: {&#39;id&#39;: 36902451, &#39;listing_id_str&#39;: &#39;36902451&#39;, &#39;name&#39;: &#39;Duplex spacieux et lumineux au centre de Chamonix&#39;}, &#39;rating&#39;: 5, &#39;recipient&#39;: {&#39;first_name&#39;: &#39;Patricia &amp; Thierry&#39;, &#39;has_profile_pic&#39;: True, &#39;id&#39;: 251507728, &#39;picture_url&#39;: &#39;https://a0.muscache.com/im/pictures/user/2cfba405-b621-42b6-8d58-4bf53055f5e2.jpg?aki_policy=profile_x_medium&#39;, &#39;smart_name&#39;: &#39;Patricia &amp; Thierry&#39;, &#39;thumbnail_url&#39;: &#39;https://a0.muscache.com/im/pictures/user/2cfba405-b621-42b6-8d58-4bf53055f5e2.jpg?aki_policy=profile_small&#39;}, &#39;response&#39;: &#39;&#39;, &#39;role&#39;: &#39;guest&#39;, &#39;language&#39;: &#39;en&#39;, &#39;user_flag&#39;: None, &#39;created_at__dt&#39;: datetime.datetime(2020, 11, 18, 13, 48, 57, tzinfo=tzutc())}]} . Publishing data as a webservice . class Info(flr.Resource): def __init__(self): super(Info, self).__init__() def get(self): return { &#39;success&#39;: True, &#39;version&#39;: &#39;0.1.0&#39;, &#39;status&#39;: &#39;ready&#39; } . class Hosting(flr.Resource): def __init__(self, **kwargs): print(&#39;__init__ for model &quot;{0}&quot;&#39;.format(kwargs[&#39;model_id&#39;])) self.model = Statics.g_models[kwargs[&#39;model_id&#39;]][&#39;model&#39;] self.reqparse = flr_r.RequestParser() for feature in self.model.input_features: self.reqparse.add_argument( feature.feature_name, type=str, location=&#39;json&#39;, required=True, help=&#39;&quot;&#39;+ feature.feature_name +&#39;&quot; is mandatory ({error_msg})&#39;) super(Hosting, self).__init__() def post(self): success = False error = None error_details = None result = None try: args = self.reqparse.parse_args() data = {} for feature in self.model.input_features: data[feature.feature_name] = args[feature.feature_name] result = self.model.predict( input=data) success = True except Exception as e: error_details = tb.format_exc() error = e.__str__() return { &#39;success&#39;: success, &#39;error&#39;: error, &#39;error_details&#39;: error_details, &#39;result&#39;: result } .",
            "url": "https://braibaud.github.io/blog/python/api/webservice/flask/2021/06/08/Exposing-API-data-via-Flask.html",
            "relUrl": "/python/api/webservice/flask/2021/06/08/Exposing-API-data-via-Flask.html",
            "date": " • Jun 8, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Univariate multi-step timeseries forecasting with Keras",
            "content": "About . Another attempt to use an LSTM based neural network (RNN) to forecast univariate multi-step timeseries data. . . The required libraries . Import the must-have libraries: . import numpy as np import pandas as pd import datetime as dt from IPython import display as ids . Import the elements required from the scikit-learn library: . import sklearn as sk import sklearn.preprocessing as skp import sklearn.model_selection as skms import sklearn.pipeline as skpl import sklearn.decomposition as skd import sklearn.linear_model as sklm import sklearn.dummy as sky import sklearn.metrics as skme . Enables defining partial functions: . from functools import partial . Import the keras elements from the tensorflow library: . import tensorflow as tf from tensorflow import keras as k from tensorflow.keras import backend as kb from tensorflow.keras import callbacks as kc from tensorflow.keras import models as km from tensorflow.keras import layers as kl from tensorflow.keras import regularizers as kr from tensorflow.keras import optimizers as ko from tensorflow.keras import utils as ku . Import matplotlib and set the default magic: . import matplotlib as mat from matplotlib import pyplot as plt import pylab as pyl import seaborn as sns %matplotlib inline %config InlineBackend.figure_format = &#39;retina&#39; . Import the mlviz library used to plot time-series visualizations: . from mlviz.timeseries import visualizationhelpers as mwvh from mlviz.utilities import graphichelpers as mwgh . The project parameters . Reset the predefined matplotlib style: . mwgh.GraphicsStatics.initialize_matplotlib_styles() . Here is the color palette we&#39;ll use for the project: . sns.palplot(mwgh.GraphicsStatics.g_palette) . Let&#39;s capture all the usefull project&#39;s parameters in a dictionary: . params = {} params[&#39;project_date&#39;] = &#39;2021-05-31&#39; params[&#39;project_name&#39;] = &#39;LSTM+01&#39; params[&#39;experiment_timestamp&#39;] = str(int(1000 * dt.datetime.timestamp(dt.datetime.utcnow()))) params[&#39;experiment_name&#39;] = &#39;{0}-{1}-{2}&#39;.format( params[&#39;project_date&#39;], params[&#39;experiment_timestamp&#39;], params[&#39;project_name&#39;]) params[&#39;data_frequency&#39;] = &#39;W-SAT&#39; params[&#39;features&#39;] = [&#39;y&#39;] params[&#39;input_size&#39;] = 52 # N weeks of data to input into the network params[&#39;output_size&#39;] = 13 # N weeks of data to output from the network params[&#39;testing_size&#39;] = 52 # N weeks of data to keep for testing the model params[&#39;lag_size&#39;] = None params[&#39;hyperband_iterations&#39;] = 3 params[&#39;max_epochs&#39;] = 250 params[&#39;patience&#39;] = int(params[&#39;max_epochs&#39;] / 10) params[&#39;batch_size&#39;] = 16 . The timeseries data . The input data is available in a csv file named timeseries-data.csv located in the data folder. It has got 2 columns date containing the date of event and value holding the value of the source. We&#39;ll rename these 2 columns as ds and y for convenience. Let&#39;s load the csv file using the pandas library and have a look at the data. . df = pd.read_csv( filepath_or_buffer=&#39;../assets/data/timeseries-data.csv&#39;, sep=&#39;;&#39;) df.rename( columns = { &#39;date&#39;: &#39;index&#39;, &#39;value&#39;: &#39;y&#39; }, inplace=True) df[&#39;index&#39;] = pd.to_datetime( arg=df[&#39;index&#39;], dayfirst=True) df.sort_values( by=&#39;index&#39;, ascending=True, inplace=True) df.set_index( keys=&#39;index&#39;, inplace=True) df = df.asfreq( freq=params[&#39;data_frequency&#39;]) df[&#39;ds&#39;] = df.index print(&#39;df.shape = {0}&#39;.format(df.shape)) df.tail(5) . df.shape = (625, 2) . y ds . index . 2019-09-28 5547 | 2019-09-28 | . 2019-10-05 6459 | 2019-10-05 | . 2019-10-12 5838 | 2019-10-12 | . 2019-10-19 5894 | 2019-10-19 | . 2019-10-26 7925 | 2019-10-26 | . Prepare data for the network . It&#39;s easy to calculate the width of a sample: . def get_maximum_lag_size(lag_data): steps_lag = 0 if lag_data is not None and len(lag_data) &gt; 0: steps_lag = max(lag_data) return steps_lag . sample_width = get_maximum_lag_size(params[&#39;lag_size&#39;]) + params[&#39;input_size&#39;] + params[&#39;output_size&#39;] print(&#39;sample_width: {0}&#39;.format(sample_width)) . sample_width: 65 . To avoid any overlap between the training and the testing data set, we&#39;ll first split the dataframes, keeping params[&#39;testing_size&#39;] samples for testing our model. We need to make sure that no data point used for training is also used for testing our model. . threshold_date = pd.to_datetime(df.index[df.shape[0] - (sample_width + params[&#39;testing_size&#39;])]) print(&#39;Cutoff date for training/testing split is {0}&#39;.format(threshold_date.strftime(&#39;%d/%m/%Y&#39;))) . Cutoff date for training/testing split is 05/08/2017 . Let&#39;s cut the dataframe at the right date: . test_mask = (df[&#39;ds&#39;] &gt; threshold_date) df_train = df[~test_mask] df_test = df[test_mask] print(&#39;df_train.shape = {0}&#39;.format(df_train.shape)) print(&#39;df_test.shape = {0}&#39;.format(df_test.shape)) . df_train.shape = (509, 2) df_test.shape = (116, 2) . The prepare_data funtion will take care of doing exactly this: . def prepare_data(data, lag_data, cols_in, steps_in, cols_out, steps_out, scaler_in=None, scaler_out=None): df = data.copy() cols_in_original = [col for col in cols_in] cols_in_processed = [col for col in cols_in] steps_lag = get_maximum_lag_size(lag_data) if steps_lag &gt; 0: for col in cols_in_original: for i, lag in enumerate(lag_data): lag_col = &#39;{0}_{1}&#39;.format(col, lag) df[lag_col] = df[col].shift(lag) cols_in_processed.append(lag_col) samples = df.shape[0] - (steps_in + steps_out + steps_lag) + 1 if samples &lt; 1: raise ValueError(&#39;not enough data to produce 1 sample.&#39;) index = list(df.index) cols_in_indices = {name: i for i, name in enumerate(cols_in_processed)} cols_out_indices = {name: i for i, name in enumerate(cols_out)} df.reset_index(inplace=True) X_input_scaled = None if scaler_in is None: scaler_in = skpl.Pipeline([ (&#39;std&#39;, skp.StandardScaler()), (&#39;minmax&#39;, skp.MinMaxScaler(feature_range=(-1, 1)))]) X_input_scaled = scaler_in.fit_transform(df[cols_in_processed].values) else: X_input_scaled = scaler_in.transform(df[cols_in_processed].values) y_output_scaled = None if scaler_out is None: scaler_out = skpl.Pipeline([ (&#39;std&#39;, skp.StandardScaler()), (&#39;minmax&#39;, skp.MinMaxScaler(feature_range=(-1, 1)))]) y_output_scaled = scaler_out.fit_transform(df[cols_out].values) else: y_output_scaled = scaler_out.transform(df[cols_out].values) X = [] y = [] for sample in range(samples): for step_in in range(steps_in): for col_in in range(len(cols_in_processed)): X.append(X_input_scaled[sample+steps_lag+step_in, col_in]) for step_out in range(steps_out): for col_out in range(len(cols_out)): y.append(y_output_scaled[sample+steps_lag+steps_in+step_out, col_out]) X = np.array(X).reshape(samples, steps_in, len(cols_in_processed)) y = np.array(y).reshape(samples, steps_out, len(cols_out)) return X, y, index, scaler_in, scaler_out, cols_in_indices, cols_out_indices . Every intput feature (passed via the function parameter cols_in) is going to be rescalled using a scikit-learn pipeline containing first a StandardScaler and then a MinMaxScaler in order to end up with a feature range of [-1, +1] required by neural networks. . X_train, y_train, index_train, scaler_in, scaler_out, cols_in_indices_train, cols_out_indices_train = prepare_data( data=df_train, lag_data=params[&#39;lag_size&#39;], cols_in=params[&#39;features&#39;], steps_in=params[&#39;input_size&#39;], cols_out=params[&#39;features&#39;], steps_out=params[&#39;output_size&#39;]) print(&#39;X_train.shape: {0}&#39;.format(X_train.shape)) print(&#39;y_train.shape: {0}&#39;.format(y_train.shape)) . X_train.shape: (445, 52, 1) y_train.shape: (445, 13, 1) . To prepare the testing data, we need to reuse both input (variable scaler_in) and output (variable scaler_out) pipelines in order to keep data scaled in the same way. . X_test, y_test, index_test, _, _, cols_in_indices_test, cols_out_indices_test = prepare_data( data=df_test, lag_data=params[&#39;lag_size&#39;], cols_in=params[&#39;features&#39;], steps_in=params[&#39;input_size&#39;], cols_out=params[&#39;features&#39;], steps_out=params[&#39;output_size&#39;], scaler_in=scaler_in, scaler_out=scaler_out) print(&#39;X_test.shape: {0}&#39;.format(X_test.shape)) print(&#39;y_test.shape: {0}&#39;.format(y_test.shape)) . X_test.shape: (52, 52, 1) y_test.shape: (52, 13, 1) . Let&#39;s compute the entire dataset and keep the output data for visualization: . X, y, index, _, _, cols_in_indices, cols_out_indices = prepare_data( data=df, lag_data=params[&#39;lag_size&#39;], cols_in=params[&#39;features&#39;], steps_in=params[&#39;input_size&#39;], cols_out=params[&#39;features&#39;], steps_out=params[&#39;output_size&#39;], scaler_in=scaler_in, scaler_out=scaler_out) print(&#39;X.shape: {0}&#39;.format(X.shape)) print(&#39;y.shape: {0}&#39;.format(y.shape)) . X.shape: (561, 52, 1) y.shape: (561, 13, 1) . Data visualization . Let&#39;s have a look at the visual representation of the timeseries data: . mwvh.plot_time_series( title=&#39;timeseries visualization&#39;, subtitle=&#39;data preparation&#39;, name=(&#39;Input - Data Visualization{0}&#39; + &#39;Training - {1} weeks ({2} samples){0}&#39; + &#39;Testing - {3} weeks ({4} samples)&#39;).format( &#39; n&#39;, df_train.shape[0], X_train.shape[0], df_test.shape[0], X_test.shape[0]), training=df_train, testing=df_test, ylabel=&#39;feature value (y)&#39;, split=threshold_date) . Build the model . Model definition . We&#39;ll use RMSE as our loss function to optimize (it is required to be defined as a function that can be compiled by TensorFlow): . def rmse_tf(y_true, y_pred): return tf.cast( tf.sqrt( tf.reduce_mean( tf.square( tf.subtract( y_pred, y_true)))), dtype=tf.float32) . First, we define a create_model function: . def create_model(loss_fn, steps_in, steps_out, n_features): # define model model = km.Sequential() model.add(kl.LSTM(steps_in, activation=&#39;tanh&#39;, return_sequences=True, input_shape=(steps_in, n_features))) model.add(kl.LSTM(2*steps_in, activation=&#39;tanh&#39;, return_sequences=True, dropout=.5)) model.add(kl.LSTM(4*steps_in, activation=&#39;tanh&#39;)) model.add(kl.Dense(steps_out, activation=&#39;tanh&#39;)) model.compile(optimizer=&#39;adam&#39;, loss=loss_fn) return model . model = create_model( loss_fn=rmse_tf, steps_in=params[&#39;input_size&#39;], steps_out=params[&#39;output_size&#39;], n_features=len(params[&#39;features&#39;])) . Let&#39;s fit this model using the data we loaded earlier: . print(&#39;X_train.shape: {0}&#39;.format(X_train.shape)) print(&#39;y_train.shape: {0}&#39;.format(y_train.shape)) . X_train.shape: (445, 52, 1) y_train.shape: (445, 13, 1) . history = model.fit( x=X_train, y=y_train, shuffle=True, batch_size=params[&#39;batch_size&#39;], validation_data=(X_test, y_test), epochs=params[&#39;max_epochs&#39;], callbacks=[ kc.EarlyStopping( monitor=&#39;val_loss&#39;, patience=params[&#39;patience&#39;], verbose=1, mode=&#39;min&#39;, restore_best_weights=True), kc.TerminateOnNaN() ], verbose=2) . Here is a text version of the model&#39;s architecture made with Keras itself. . model.summary( line_length=120) . Model: &#34;sequential&#34; ________________________________________________________________________________________________________________________ Layer (type) Output Shape Param # ======================================================================================================================== lstm (LSTM) (None, 52, 52) 11232 ________________________________________________________________________________________________________________________ lstm_1 (LSTM) (None, 52, 104) 65312 ________________________________________________________________________________________________________________________ lstm_2 (LSTM) (None, 208) 260416 ________________________________________________________________________________________________________________________ dense (Dense) (None, 13) 2717 ======================================================================================================================== Total params: 339,677 Trainable params: 339,677 Non-trainable params: 0 ________________________________________________________________________________________________________________________ . Model analysis . We can save this default model and use the Netron application to create a visual representation of it. . model.save( &#39;./.models/{0}.h5&#39;.format( params[&#39;experiment_name&#39;])) . We can see the optimization process on the chart below. . def plot_model_history(history): &#39;&#39;&#39; Summarizes the history for all loss functions, throughout the epochs. &#39;&#39;&#39; for fn in list(history.history.keys()): plt.plot(history.history[fn]) plt.title(&#39;Model loss&#39;) plt.ylabel(&#39;loss&#39;) plt.xlabel(&#39;epoch&#39;) plt.legend(list(history.history.keys()), loc=&#39;upper right&#39;) plt.show() . plot_model_history(history=history) . Let&#39;s zoom in and focus on the last n weeks of data. . def get_n_weeks_window(n_weeks): return dt.timedelta(weeks=n_weeks) . We need a functions to compute the various model scores. . def score(loss_fn, y_true, y_pred): if loss_fn == &#39;RMSE&#39;: return skme.mean_squared_error( y_true=y_true, y_pred=y_pred, squared=False) elif loss_fn == &#39;MSLE&#39;: return skme.mean_squared_log_error( y_true=y_true, y_pred=y_pred) elif loss_fn == &#39;MSE&#39;: return skme.mean_squared_error( y_true=y_true, y_pred=y_pred, squared=True) elif loss_fn == &#39;R2&#39;: return skme.r2_score( y_true=y_true, y_pred=y_pred) elif loss_fn == &#39;MAE&#39;: return skme.mean_absolute_error( y_true=y_true, y_pred=y_pred) elif loss_fn == &#39;MAPE&#39;: return skme.mean_absolute_percentage_error( y_true=y_true, y_pred=y_pred) . We can process de predicted values returned by the model. The model sequencialy produces params[&#39;output_size&#39;] data points (i.e. the number of weeks of data points predicted). Predictions will enventually overlap, so we can use the mean function to get a good candidate of the current value. Similarly, the min and the max will provide a convenient confidence interval. . def process_predictions(data, X, y, scaler_out, model): data_pre = data.copy() scores = [] predictions = [] score_functions = [&#39;RMSE&#39;, &#39;MSE&#39;, &#39;R2&#39;, &#39;MAE&#39;, &#39;MAPE&#39;] lag_data = params[&#39;lag_size&#39;] steps_lag = 0 if lag_data is not None and len(lag_data) &gt; 0: steps_lag = max(lag_data) y_preds = model.predict( x=X, batch_size=params[&#39;batch_size&#39;], verbose=0) # print(&#39;y_preds.shape: {0}&#39;.format(y_preds.shape)) y_true_array = [] y_pred_array = [] for i in range(y.shape[0]): t_score = {} y_true = scaler_out.inverse_transform(y[i]) y_pred = scaler_out.inverse_transform(y_preds[i].reshape(-1, 1)) y_true_array.append(y_true) y_pred_array.append(y_pred) for score_function in score_functions: t_score[score_function] = score( score_function, y_true, y_pred) scores.append(t_score) prediction = [np.nan] * data_pre.shape[0] for j in range(len(y_true)): position = steps_lag + i + j + params[&#39;input_size&#39;] prediction[position] = y_pred[j][0] predictions.append( prediction) df_scores = pd.DataFrame.from_records(scores) data_pre[&#39;yhat_lower&#39;] = pd.DataFrame(predictions).min().values data_pre[&#39;yhat_upper&#39;] = pd.DataFrame(predictions).max().values data_pre[&#39;yhat&#39;] = pd.DataFrame(predictions).mean().values data_pre[&#39;yhat_last&#39;] = predictions[-1] data_pre[&#39;residual&#39;] = abs(data_pre[&#39;yhat&#39;] - data_pre[&#39;y&#39;]) pred = { &#39;df&#39;: data_pre, &#39;scores&#39;: df_scores, &#39;y_true&#39;: y_true_array, &#39;y_pred&#39;: y_pred_array, &#39;predictions&#39;: predictions } return pred . pred = process_predictions( data=df, X=X, y=y, scaler_out=scaler_out, model=model) . Let&#39;s have a look at the model performance: . upper_percentile_score = pred[&#39;scores&#39;].iloc[-X_test.shape[0]:][&#39;RMSE&#39;].describe()[&#39;75%&#39;] print(&#39;75 percentile score: {0:.2f}&#39;.format(upper_percentile_score)) . 75 percentile score: 1415.17 . We can see on the chart that the predictions are quite basic but still properly following the local trend as well as the seasonal variations. . mwvh.plot_time_series( title=&#39;Time Series Visualization&#39;, subtitle=&#39;default model predictions&#39;, name=(&#39;Input - Data Visualization{0}&#39; + &#39;Training - {1} weeks ({2} samples){0}&#39; + &#39;Testing - {3} weeks ({4} samples)&#39;).format( &#39; n&#39;, df_train.shape[0], X_train.shape[0], df_test.shape[0], X_test.shape[0]), training=df_train, testing=df_test, confidence=pred[&#39;df&#39;], confidence_label=&#39;Confidence interval&#39;, prediction=pred[&#39;df&#39;], residual=pred[&#39;df&#39;], residual_label=&#39;Residual error&#39;, ylabel=&#39;feature value (y)&#39;, split=threshold_date, window_size=get_n_weeks_window(16*params[&#39;output_size&#39;])) . mwvh.plot_time_series( title=&#39;Time Series Visualization&#39;, subtitle=&#39;default model predictions&#39;, name=(&#39;Input - Data Visualization{0}&#39; + &#39;Training - {1} weeks ({2} samples){0}&#39; + &#39;Testing - {3} weeks ({4} samples)&#39;).format( &#39; n&#39;, df_train.shape[0], X_train.shape[0], df_test.shape[0], X_test.shape[0]), testing=df_test, confidence=pred[&#39;df&#39;], confidence_label=&#39;Confidence interval&#39;, prediction=pred[&#39;df&#39;], prediction_col=&#39;yhat&#39;, residual=pred[&#39;df&#39;], residual_label=&#39;Residual error&#39;, ylabel=&#39;feature value (y)&#39;, window_size=get_n_weeks_window(4*params[&#39;output_size&#39;])) .",
            "url": "https://braibaud.github.io/blog/lstm/keras/python/machine%20learning/timeseries/2021/06/04/Univariate-multi-step-timeseries-forecasting-with-Keras.html",
            "relUrl": "/lstm/keras/python/machine%20learning/timeseries/2021/06/04/Univariate-multi-step-timeseries-forecasting-with-Keras.html",
            "date": " • Jun 4, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Check whether TensorFlow runs on GPU",
            "content": "About . We are going to check if a GPU device is made available to TensorFlow. . . Code . import tensorflow as tf if tf.test.gpu_device_name(): print(&#39;Default GPU Device: {}&#39;.format(tf.test.gpu_device_name())) else: print(&#39;Please install GPU version of TF&#39;) . Default GPU Device: /device:GPU:0 .",
            "url": "https://braibaud.github.io/blog/python/machine%20learning/tensorflow/gpu/2021/06/01/Check-whether-TensorFlow-runs-on-GPU.html",
            "relUrl": "/python/machine%20learning/tensorflow/gpu/2021/06/01/Check-whether-TensorFlow-runs-on-GPU.html",
            "date": " • Jun 1, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "LSTM timeseries forecasting with Keras Tuner",
            "content": "About . This project is a demonstration of some of capabilities of Keras Tuner. This project is an attempt to use an LSTM based neural network (RNN) to forecast timeseries data. . . The required libraries . Import the must-have libraries: . import numpy as np import pandas as pd import datetime as dt from IPython import display as ids . Import the elements required from the scikit-learn library: . import sklearn as sk import sklearn.preprocessing as skp import sklearn.model_selection as skms import sklearn.pipeline as skpl import sklearn.decomposition as skd import sklearn.linear_model as sklm import sklearn.dummy as sky import sklearn.metrics as skme . Enables defining partial functions: . from functools import partial . Import the keras elements from the tensorflow library: . import tensorflow as tf from tensorflow import keras as k from tensorflow.keras import backend as kb from tensorflow.keras import callbacks as kc from tensorflow.keras import models as km from tensorflow.keras import layers as kl from tensorflow.keras import regularizers as kr from tensorflow.keras import optimizers as ko from tensorflow.keras import utils as ku . Import the keras-tuner library as we&#39;ll use it to tune hyperparameters: . import kerastuner as kt from kerastuner import tuners as ktt from kerastuner import engine as kte . Import matplotlib and set the default magic: . import matplotlib as mat from matplotlib import pyplot as plt import pylab as pyl import seaborn as sns %matplotlib inline %config InlineBackend.figure_format = &#39;retina&#39; . Import the mlviz library used to plot time-series visualizations: . from mlviz.timeseries import visualizationhelpers as mwvh from mlviz.utilities import graphichelpers as mwgh . The project parameters . Reset the predefined matplotlib style: . mwgh.GraphicsStatics.initialize_matplotlib_styles() . Here is the color palette we&#39;ll use for the project: . sns.palplot(mwgh.GraphicsStatics.g_palette) . Let&#39;s capture all the usefull project&#39;s parameters in a dictionary: . params = {} params[&#39;project_date&#39;] = &#39;2021-05-31&#39; params[&#39;project_name&#39;] = &#39;LSTM+01&#39; params[&#39;experiment_timestamp&#39;] = str(int(1000 * dt.datetime.timestamp(dt.datetime.utcnow()))) params[&#39;experiment_name&#39;] = &#39;{0}-{1}-{2}&#39;.format( params[&#39;project_date&#39;], params[&#39;experiment_timestamp&#39;], params[&#39;project_name&#39;]) params[&#39;data_frequency&#39;] = &#39;W-SAT&#39; params[&#39;features&#39;] = [&#39;y&#39;] params[&#39;input_size&#39;] = 52 # N weeks of data to input into the network params[&#39;output_size&#39;] = 13 # N weeks of data to output from the network params[&#39;testing_size&#39;] = 52 # N weeks of data to keep for testing the model params[&#39;lag_size&#39;] = [13, 26, 39] # Lagged data series injected into the network params[&#39;hyperband_iterations&#39;] = 3 params[&#39;max_epochs&#39;] = 250 params[&#39;patience&#39;] = int(params[&#39;max_epochs&#39;] / 10) params[&#39;batch_size&#39;] = 32 . The timeseries data . The input data is available in a csv file named timeseries-data.csv located in the data folder. It has got 2 columns date containing the date of event and value holding the value of the source. We&#39;ll rename these 2 columns as ds and y for convenience. Let&#39;s load the csv file using the pandas library and have a look at the data. . df = pd.read_csv( filepath_or_buffer=&#39;../assets/data/timeseries-data.csv&#39;, sep=&#39;;&#39;) df.rename( columns = { &#39;date&#39;: &#39;index&#39;, &#39;value&#39;: &#39;y&#39; }, inplace=True) df[&#39;index&#39;] = pd.to_datetime( arg=df[&#39;index&#39;], dayfirst=True) df.sort_values( by=&#39;index&#39;, ascending=True, inplace=True) df.set_index( keys=&#39;index&#39;, inplace=True) df = df.asfreq( freq=params[&#39;data_frequency&#39;]) df[&#39;ds&#39;] = df.index print(&#39;df.shape = {0}&#39;.format(df.shape)) df.tail(5) . df.shape = (625, 2) . y ds . index . 2019-09-28 5547 | 2019-09-28 | . 2019-10-05 6459 | 2019-10-05 | . 2019-10-12 5838 | 2019-10-12 | . 2019-10-19 5894 | 2019-10-19 | . 2019-10-26 7925 | 2019-10-26 | . Prepare data for the network . It is time to prepare the dataset to feed into the LSTM model. We&#39;ll use 4 features as input: the current data point as well as 3 additional data points from respectively 13, 26 and 39 weeks before the current datapoint the lag features below). . . It&#39;s easy to calculate the width of a sample: . sample_width = max(params[&#39;lag_size&#39;]) + params[&#39;input_size&#39;] + params[&#39;output_size&#39;] print(&#39;sample_width: {0}&#39;.format(sample_width)) . sample_width: 104 . To avoid any overlap between the training and the testing data set, we&#39;ll first split the dataframes, keeping params[&#39;testing_size&#39;] samples for testing our model. We need to make sure that no data point used for training is also used for testing our model. . threshold_date = pd.to_datetime(df.index[df.shape[0] - (sample_width + params[&#39;testing_size&#39;])]) print(&#39;Cutoff date for training/testing split is {0}&#39;.format(threshold_date.strftime(&#39;%d/%m/%Y&#39;))) . Cutoff date for training/testing split is 05/11/2016 . Let&#39;s cut the dataframe at the right date: . test_mask = (df[&#39;ds&#39;] &gt; threshold_date) df_train = df[~test_mask] df_test = df[test_mask] print(&#39;df_train.shape = {0}&#39;.format(df_train.shape)) print(&#39;df_test.shape = {0}&#39;.format(df_test.shape)) . df_train.shape = (470, 2) df_test.shape = (155, 2) . The prepare_data funtion will take care of doing exactly this: . def prepare_data(data, lag_data, cols_in, steps_in, cols_out, steps_out, scaler_in=None, scaler_out=None): df = data.copy() cols_in_original = [col for col in cols_in] cols_in_processed = [col for col in cols_in] steps_lag = 0 if lag_data is not None and len(lag_data) &gt; 0: steps_lag = max(lag_data) for col in cols_in_original: for i, lag in enumerate(lag_data): lag_col = &#39;{0}_{1}&#39;.format(col, lag) df[lag_col] = df[col].shift(lag) cols_in_processed.append(lag_col) samples = df.shape[0] - (steps_in + steps_out + steps_lag) + 1 if samples &lt; 1: raise ValueError(&#39;not enough data to produce 1 sample.&#39;) index = list(df.index) cols_in_indices = {name: i for i, name in enumerate(cols_in_processed)} cols_out_indices = {name: i for i, name in enumerate(cols_out)} df.reset_index(inplace=True) X_input_scaled = None if scaler_in is None: scaler_in = skpl.Pipeline([ (&#39;std&#39;, skp.StandardScaler()), (&#39;minmax&#39;, skp.MinMaxScaler(feature_range=(-1, 1)))]) X_input_scaled = scaler_in.fit_transform(df[cols_in_processed].values) else: X_input_scaled = scaler_in.transform(df[cols_in_processed].values) y_output_scaled = None if scaler_out is None: scaler_out = skpl.Pipeline([ (&#39;std&#39;, skp.StandardScaler()), (&#39;minmax&#39;, skp.MinMaxScaler(feature_range=(-1, 1)))]) y_output_scaled = scaler_out.fit_transform(df[cols_out].values) else: y_output_scaled = scaler_out.transform(df[cols_out].values) X = [] y = [] for sample in range(samples): for step_in in range(steps_in): for col_in in range(len(cols_in_processed)): X.append(X_input_scaled[sample+steps_lag+step_in, col_in]) for step_out in range(steps_out): for col_out in range(len(cols_out)): y.append(y_output_scaled[sample+steps_lag+steps_in+step_out, col_out]) X = np.array(X).reshape(samples, steps_in, len(cols_in_processed)) y = np.array(y).reshape(samples, steps_out, len(cols_out)) return X, y, index, scaler_in, scaler_out, cols_in_indices, cols_out_indices . Every intput feature (passed via the function parameter cols_in) is going to be rescalled using a scikit-learn pipeline containing first a StandardScaler and then a MinMaxScaler in order to end up with a feature range of [-1, +1] required by neural networks. . X_train, y_train, index_train, scaler_in, scaler_out, cols_in_indices_train, cols_out_indices_train = prepare_data( data=df_train, lag_data=params[&#39;lag_size&#39;], cols_in=params[&#39;features&#39;], steps_in=params[&#39;input_size&#39;], cols_out=params[&#39;features&#39;], steps_out=params[&#39;output_size&#39;]) print(&#39;X_train.shape: {0}&#39;.format(X_train.shape)) print(&#39;y_train.shape: {0}&#39;.format(y_train.shape)) . X_train.shape: (367, 52, 4) y_train.shape: (367, 13, 1) . To prepare the testing data, we need to reuse both input (variable scaler_in) and output (variable scaler_out) pipelines in order to keep data scaled in the same way. . X_test, y_test, index_test, _, _, cols_in_indices_test, cols_out_indices_test = prepare_data( data=df_test, lag_data=params[&#39;lag_size&#39;], cols_in=params[&#39;features&#39;], steps_in=params[&#39;input_size&#39;], cols_out=params[&#39;features&#39;], steps_out=params[&#39;output_size&#39;], scaler_in=scaler_in, scaler_out=scaler_out) print(&#39;X_test.shape: {0}&#39;.format(X_test.shape)) print(&#39;y_test.shape: {0}&#39;.format(y_test.shape)) . X_test.shape: (52, 52, 4) y_test.shape: (52, 13, 1) . Let&#39;s compute the entire dataset and keep the output data for visualization: . X, y, index, _, _, cols_in_indices, cols_out_indices = prepare_data( data=df, lag_data=params[&#39;lag_size&#39;], cols_in=params[&#39;features&#39;], steps_in=params[&#39;input_size&#39;], cols_out=params[&#39;features&#39;], steps_out=params[&#39;output_size&#39;], scaler_in=scaler_in, scaler_out=scaler_out) print(&#39;X.shape: {0}&#39;.format(X.shape)) print(&#39;y.shape: {0}&#39;.format(y.shape)) . X.shape: (522, 52, 4) y.shape: (522, 13, 1) . Data visualization . Let&#39;s have a look at the visual representation of the timeseries data: . mwvh.plot_time_series( title=&#39;timeseries visualization&#39;, subtitle=&#39;data preparation&#39;, name=(&#39;Input - Data Visualization{0}&#39; + &#39;Training - {1} weeks ({2} samples){0}&#39; + &#39;Testing - {3} weeks ({4} samples)&#39;).format( &#39; n&#39;, df_train.shape[0], X_train.shape[0], df_test.shape[0], X_test.shape[0]), training=df_train, testing=df_test, ylabel=&#39;feature value (y)&#39;, split=threshold_date) . Build the model . Hyperparameters space definition . We&#39;ll use RMSE as our loss function to optimize (it is required to be defined as a function that can be compiled by TensorFlow): . def rmse_tf(y_true, y_pred): return tf.cast( tf.sqrt( tf.reduce_mean( tf.square( tf.subtract( y_pred, y_true)))), dtype=tf.float32) . First, we define a model-building function. It takes an argument hp from which Keras-Tuner can sample hyperparameters: . def build_model_hp( hp, loss_fn, metrics_fn, steps_in, steps_out, n_features, n_lstm_layers, bidirectional_lstm, n_layers): # define model model = km.Sequential() layer = kl.LSTM( name=&#39;lstm_x&#39;, kernel_regularizer=kr.l2( l=hp.Float( name=&#39;lstm_x_kernel_regularizer_l2_alpha&#39;, min_value=1e-5, max_value=1e-3, default=1e-5, sampling=&#39;log&#39;)), bias_regularizer=kr.l2( l=hp.Float( name=&#39;lstm_x_bias_regularizer_l2_alpha&#39;, min_value=1e-5, max_value=1e-3, default=1e-4, sampling=&#39;log&#39;)), units=hp.Int( name=&#39;lstm_x_units&#39;, min_value=64, max_value=128, step=4), input_shape=(steps_in, n_features), dropout=hp.Float( name=&#39;lstm_x_dropout&#39;, min_value=0.45, max_value=0.55, default=0.5, step=0.1), return_sequences=False) if bidirectional_lstm: model.add( kl.Bidirectional( name=&#39;lstm_x_bidirectional&#39;, layer=layer, merge_mode=&#39;ave&#39;)) else: model.add(layer) model.add( kl.RepeatVector( n=steps_out)) for n_lstm in range(n_lstm_layers): layer = kl.LSTM( name=&#39;lstm_{0}&#39;.format(n_lstm), kernel_regularizer=kr.l2( l=hp.Float( name=&#39;lstm_{0}_kernel_regularizer_l2_alpha&#39;.format(n_lstm), min_value=1e-5, max_value=1e-3, default=1e-5, sampling=&#39;log&#39;)), bias_regularizer=kr.l2( l=hp.Float( name=&#39;lstm_{0}_bias_regularizer_l2_alpha&#39;.format(n_lstm), min_value=1e-5, max_value=1e-3, default=1e-4, sampling=&#39;log&#39;)), units=hp.Int( name=&#39;lstm_{0}_units&#39;.format(n_lstm), min_value=64, max_value=128, step=4), dropout=hp.Float( name=&#39;lstm_{0}_dropout&#39;.format(n_lstm), min_value=0.45, max_value=0.55, default=0.5, step=0.1), return_sequences=True) if bidirectional_lstm: model.add( kl.Bidirectional( name=&#39;lstm_{0}_bidirectional&#39;.format(n_lstm), layer=layer, merge_mode=&#39;ave&#39;)) else: model.add(layer) dense_dropout = hp.Float( name=&#39;dense_dropout&#39;, min_value=0.45, max_value=0.55, default=0.5, step=0.1) for n_layer in reversed(range(n_layers)): layer_size = (1 + n_layer) ** 2 model.add( kl.TimeDistributed( name=&#39;dense_{0}_timedistributed&#39;.format(n_layer), layer=kl.Dense( name=&#39;dense_{0}&#39;.format(n_layer), activation=&#39;tanh&#39;, kernel_initializer=&#39;glorot_uniform&#39;, bias_initializer=&#39;glorot_uniform&#39;, kernel_regularizer=kr.l2( l=hp.Float( name=&#39;dense_{0}_kernel_regularizer_l2_alpha&#39;.format(n_layer), min_value=1e-5, max_value=1e-3, default=1e-5, sampling=&#39;log&#39;)), bias_regularizer=kr.l2( l=hp.Float( name=&#39;dense_{0}_bias_regularizer_l2_alpha&#39;.format(n_layer), min_value=1e-5, max_value=1e-3, default=1e-4, sampling=&#39;log&#39;)), units=hp.Int( name=&#39;dense_{0}_units&#39;.format(n_layer), min_value=8*layer_size, max_value=16*layer_size, step=2*layer_size)))) model.add( kl.Dropout( name=&#39;dense_{0}_dropout&#39;.format(n_layer), rate=dense_dropout)) model.add( kl.BatchNormalization( name=&#39;dense_{0}_batchnorm&#39;.format(n_layer))) model.add( kl.TimeDistributed( name=&#39;dense_output_timedistributed&#39;, layer=kl.Dense( name=&#39;dense_output&#39;, activation=&#39;linear&#39;, kernel_initializer=&#39;glorot_uniform&#39;, bias_initializer=&#39;glorot_uniform&#39;, kernel_regularizer=kr.l2( l=hp.Float( name=&#39;dense_output_kernel_regularizer_l2_alpha&#39;, min_value=1e-5, max_value=1e-3, default=1e-5, sampling=&#39;log&#39;)), bias_regularizer=kr.l2( l=hp.Float( name=&#39;dense_output_bias_regularizer_l2_alpha&#39;, min_value=1e-5, max_value=1e-3, default=1e-4, sampling=&#39;log&#39;)), units=1))) model.compile( loss=loss_fn, metrics=metrics_fn, optimizer=ko.Adam( learning_rate=hp.Float( name=&#39;learning_rate&#39;, min_value=1e-6, max_value=1e-3, default=1e-3, sampling=&#39;log&#39;))) return model . It is required to define a partial wrapping the build-function to ensure the signature matches the Keras-Tuner expectations: . build_model = partial( build_model_hp, loss_fn=rmse_tf, metrics_fn=None, steps_in=params[&#39;input_size&#39;], steps_out=params[&#39;output_size&#39;], n_features=len(params[&#39;features&#39;]), n_lstm_layers=1, bidirectional_lstm=True, n_layers=1) . We can create an Hyperband tuner to do the hyperparameter search. The main objective is to minimize the validation loss. . tuner = ktt.Hyperband( build_model, project_name=params[&#39;experiment_name&#39;], directory=&#39;.tuner&#39;, objective=&#39;val_loss&#39;, allow_new_entries=True, tune_new_entries=True, hyperband_iterations=params[&#39;hyperband_iterations&#39;], max_epochs=params[&#39;max_epochs&#39;]) . Default model analysis . We can start by evaluating a default model, i.e. a model for which all hyperparameters are set to their default value. As we did not specified a default value for all hyperparameters in the build_model_hp function, for such ones their min value will be used instead. To create a default model we just need to pass a fresh kte.hyperparameters.HyperParameters() class instance to the buildfunction. . default_model = tuner.hypermodel.build( kte.hyperparameters.HyperParameters()) . Let&#39;s fit this model using the data we loaded earlier: . default_history = default_model.fit( x=X_train, y=y_train, shuffle=True, batch_size=params[&#39;batch_size&#39;], validation_data=(X_test, y_test), epochs=params[&#39;max_epochs&#39;], callbacks=[ kc.EarlyStopping( monitor=&#39;val_loss&#39;, patience=params[&#39;patience&#39;], verbose=1, mode=&#39;min&#39;, restore_best_weights=True), kc.ReduceLROnPlateau( monitor=&#39;val_loss&#39;, factor=1/5, patience=int(params[&#39;patience&#39;]/3), verbose=1, min_lr=1e-6), kc.TerminateOnNaN() ], verbose=2) . We can save this default model and use the Netron application to create a visual representation of it. . default_model.save( &#39;./.models/{0}_default.h5&#39;.format( params[&#39;experiment_name&#39;])) . And here is a visual plot of the model made using the Netron application. . . Here is a text version of the model&#39;s architecture made with Keras itself. . default_model.summary( line_length=120) . Model: &#34;sequential&#34; ________________________________________________________________________________________________________________________ Layer (type) Output Shape Param # ======================================================================================================================== lstm_x_bidirectional (Bidirectional) (None, 64) 35328 ________________________________________________________________________________________________________________________ repeat_vector (RepeatVector) (None, 13, 64) 0 ________________________________________________________________________________________________________________________ lstm_0_bidirectional (Bidirectional) (None, 13, 64) 66048 ________________________________________________________________________________________________________________________ dense_1_timedistributed (TimeDistributed) (None, 13, 32) 2080 ________________________________________________________________________________________________________________________ dense_1_dropout (Dropout) (None, 13, 32) 0 ________________________________________________________________________________________________________________________ dense_0_timedistributed (TimeDistributed) (None, 13, 8) 264 ________________________________________________________________________________________________________________________ dense_0_dropout (Dropout) (None, 13, 8) 0 ________________________________________________________________________________________________________________________ dense_output_timedistributed (TimeDistributed) (None, 13, 1) 9 ======================================================================================================================== Total params: 103,729 Trainable params: 103,729 Non-trainable params: 0 ________________________________________________________________________________________________________________________ . We can see the optimization process on the chart below. . def plot_model_history(history): &#39;&#39;&#39; Summarizes the history for all loss functions, throughout the epochs. &#39;&#39;&#39; for fn in list(history.history.keys()): plt.plot(history.history[fn]) plt.title(&#39;Model loss&#39;) plt.ylabel(&#39;loss&#39;) plt.xlabel(&#39;epoch&#39;) plt.legend(list(history.history.keys()), loc=&#39;upper right&#39;) plt.show() . plot_model_history(history=default_history) . Let&#39;s zoom in and focus on the last n weeks of data. . def get_n_weeks_window(n_weeks): return dt.timedelta(weeks=n_weeks) . We need a functions to compute the various model scores. . def score(loss_fn, y_true, y_pred): if loss_fn == &#39;RMSE&#39;: return skme.mean_squared_error( y_true=y_true, y_pred=y_pred, squared=False) elif loss_fn == &#39;MSLE&#39;: return skme.mean_squared_log_error( y_true=y_true, y_pred=y_pred) elif loss_fn == &#39;MSE&#39;: return skme.mean_squared_error( y_true=y_true, y_pred=y_pred, squared=True) elif loss_fn == &#39;R2&#39;: return skme.r2_score( y_true=y_true, y_pred=y_pred) elif loss_fn == &#39;MAE&#39;: return skme.mean_absolute_error( y_true=y_true, y_pred=y_pred) elif loss_fn == &#39;MAPE&#39;: return skme.mean_absolute_percentage_error( y_true=y_true, y_pred=y_pred) . We can process de predicted values returned by the model. The model sequencialy produces params[&#39;output_size&#39;] data points (i.e. the number of weeks of data points predicted). Predictions will enventually overlap, so we can use the mean function to get a good candidate of the current value. Similarly, the min and the max will provide a convenient confidence interval. . def process_predictions(data, X, y, scaler_out, model): data_pre = data.copy() scores = [] predictions = [] score_functions = [&#39;RMSE&#39;, &#39;MSE&#39;, &#39;R2&#39;, &#39;MAE&#39;, &#39;MAPE&#39;] lag_data = params[&#39;lag_size&#39;] steps_lag = 0 if lag_data is not None and len(lag_data) &gt; 0: steps_lag = max(lag_data) y_preds = model.predict( x=X, batch_size=params[&#39;batch_size&#39;], verbose=0) y_true_array = [] y_pred_array = [] for i in range(y.shape[0]): t_score = {} y_true = scaler_out.inverse_transform(y[i]) y_pred = scaler_out.inverse_transform(y_preds[i]) y_true_array.append(y_true) y_pred_array.append(y_pred) for score_function in score_functions: t_score[score_function] = score( score_function, y_true, y_pred) scores.append(t_score) prediction = [np.nan] * data_pre.shape[0] for j in range(len(y_true)): position = steps_lag + i + j + params[&#39;input_size&#39;] prediction[position] = y_pred[j][0] predictions.append( prediction) df_scores = pd.DataFrame.from_records(scores) data_pre[&#39;yhat_lower&#39;] = pd.DataFrame(predictions).min().values data_pre[&#39;yhat_upper&#39;] = pd.DataFrame(predictions).max().values data_pre[&#39;yhat&#39;] = pd.DataFrame(predictions).mean().values data_pre[&#39;yhat_last&#39;] = predictions[-1] data_pre[&#39;residual&#39;] = abs(data_pre[&#39;yhat&#39;] - data_pre[&#39;y&#39;]) pred = { &#39;df&#39;: data_pre, &#39;scores&#39;: df_scores, &#39;y_true&#39;: y_true_array, &#39;y_pred&#39;: y_pred_array, &#39;predictions&#39;: predictions } return pred . pred_default = process_predictions( data=df, X=X, y=y, scaler_out=scaler_out, model=default_model) . We can see on the chart that the predictions are quite basic but still properly following the local trend as well as the seasonal variations. . mwvh.plot_time_series( title=&#39;Time Series Visualization&#39;, subtitle=&#39;default model predictions&#39;, name=(&#39;Input - Data Visualization{0}&#39; + &#39;Training - {1} weeks ({2} samples){0}&#39; + &#39;Testing - {3} weeks ({4} samples)&#39;).format( &#39; n&#39;, df_train.shape[0], X_train.shape[0], df_test.shape[0], X_test.shape[0]), training=df_train, testing=df_test, confidence=pred_default[&#39;df&#39;], confidence_label=&#39;Confidence interval&#39;, prediction=pred_default[&#39;df&#39;], residual=pred_default[&#39;df&#39;], residual_label=&#39;Residual error&#39;, ylabel=&#39;feature value (y)&#39;, split=threshold_date, window_size=get_n_weeks_window(16*params[&#39;output_size&#39;])) . mwvh.plot_time_series( title=&#39;Time Series Visualization&#39;, subtitle=&#39;default model predictions&#39;, name=(&#39;Input - Data Visualization{0}&#39; + &#39;Training - {1} weeks ({2} samples){0}&#39; + &#39;Testing - {3} weeks ({4} samples)&#39;).format( &#39; n&#39;, df_train.shape[0], X_train.shape[0], df_test.shape[0], X_test.shape[0]), testing=df_test, confidence=pred_default[&#39;df&#39;], confidence_label=&#39;Confidence interval&#39;, prediction=pred_default[&#39;df&#39;], prediction_col=&#39;yhat&#39;, residual=pred_default[&#39;df&#39;], residual_label=&#39;Residual error&#39;, ylabel=&#39;feature value (y)&#39;, window_size=get_n_weeks_window(4*params[&#39;output_size&#39;])) . Hyperparamters tuning . Keras-Tuner comes with an efficient Hyperband tuner that can search and find the optimized set of parameters. Let&#39;s try and find a better model than the default one. . We need this class to clear cell output after each trial: . class ClearTrainingOutput(kc.Callback): def on_train_end(*args, **kwargs): ids.clear_output(wait=True) . We can performs a search for best hyperparameters configuration. . tuner.search( x=X_train, y=y_train, shuffle=True, batch_size=params[&#39;batch_size&#39;], validation_data=(X_test, y_test), epochs=params[&#39;max_epochs&#39;], callbacks=[ ClearTrainingOutput(), kc.EarlyStopping( monitor=&#39;val_loss&#39;, patience=params[&#39;patience&#39;], verbose=1, mode=&#39;min&#39;, restore_best_weights=True), kc.TerminateOnNaN() ], verbose=2) . Trial 2175 Complete [00h 02m 07s] val_loss: 0.3842664062976837 Best val_loss So Far: 0.14739209413528442 Total elapsed time: 15h 21m 45s INFO:tensorflow:Oracle triggered exit . We can print out the results summary: . tuner.results_summary(num_trials=1) . Results summary Results in .tuner 2021-05-31-1622706773552-LSTM+01 Showing 1 best trials Objective(name=&#39;val_loss&#39;, direction=&#39;min&#39;) Trial summary Hyperparameters: lstm_x_kernel_regularizer_l2_alpha: 2.9668268997167553e-05 lstm_x_bias_regularizer_l2_alpha: 0.00038567127811387804 lstm_x_units: 108 lstm_x_dropout: 0.45 lstm_0_kernel_regularizer_l2_alpha: 8.535913146840679e-05 lstm_0_bias_regularizer_l2_alpha: 0.00020659115658466396 lstm_0_units: 96 lstm_0_dropout: 0.55 dense_dropout: 0.55 dense_1_kernel_regularizer_l2_alpha: 5.832680412025289e-05 dense_1_bias_regularizer_l2_alpha: 0.0007561268585695314 dense_1_units: 40 dense_0_kernel_regularizer_l2_alpha: 2.5000059665917292e-05 dense_0_bias_regularizer_l2_alpha: 3.8711445593710885e-05 dense_0_units: 8 dense_output_kernel_regularizer_l2_alpha: 2.526185546309563e-05 dense_output_bias_regularizer_l2_alpha: 0.0009009438052949248 learning_rate: 0.0009089947410825655 tuner/epochs: 250 tuner/initial_epoch: 0 tuner/bracket: 0 tuner/round: 0 Score: 0.14739209413528442 . And we can retrieve the best hyperparameters configuration: . best_params = tuner.get_best_hyperparameters(num_trials=1)[0] . Which we can use to build the model with the best hyperparameters configuration: . model = tuner.hypermodel.build(best_params) . Let&#39;s fit this model using the training data used during the search: . history = model.fit( x=X_train, y=y_train, shuffle=True, batch_size=params[&#39;batch_size&#39;], validation_data=(X_test, y_test), epochs=params[&#39;max_epochs&#39;], callbacks=[ kc.EarlyStopping( monitor=&#39;val_loss&#39;, patience=params[&#39;patience&#39;], verbose=1, mode=&#39;min&#39;, restore_best_weights=True), kc.TerminateOnNaN() ], verbose=2) . It is a good time to save our model for future use: . model.save( &#39;./.models/{0}.h5&#39;.format( params[&#39;experiment_name&#39;])) . We can see the optimization process on the chart below. . plot_model_history(history=history) . Here are our model scores. . pred_optimized = process_predictions( data=df, X=X, y=y, scaler_out=scaler_out, model=model) . We can plot the predictions we&#39;ve made with our optimized model. . mwvh.plot_time_series( title=&#39;Time Series Visualization&#39;, subtitle=&#39;optimized model predictions&#39;, name=(&#39;Input - Data Visualization{0}&#39; + &#39;Training - {1} weeks ({2} samples){0}&#39; + &#39;Testing - {3} weeks ({4} samples)&#39;).format( &#39; n&#39;, df_train.shape[0], X_train.shape[0], df_test.shape[0], X_test.shape[0]), training=df_train, testing=df_test, confidence=pred_optimized[&#39;df&#39;], confidence_label=&#39;Confidence interval&#39;, prediction=pred_optimized[&#39;df&#39;], residual=pred_optimized[&#39;df&#39;], ylabel=&#39;feature value (y)&#39;, split=threshold_date, window_size=get_n_weeks_window(16*params[&#39;output_size&#39;])) . This is the last year of data for the optimized model predictions: . mwvh.plot_time_series( title=&#39;Time Series Visualization&#39;, subtitle=&#39;optimized model predictions&#39;, name=(&#39;Input - Data Visualization{0}&#39; + &#39;Training - {1} weeks ({2} samples){0}&#39; + &#39;Testing - {3} weeks ({4} samples)&#39;).format( &#39; n&#39;, df_train.shape[0], X_train.shape[0], df_test.shape[0], X_test.shape[0]), testing=df_test, confidence=pred_optimized[&#39;df&#39;], confidence_label=&#39;Confidence interval&#39;, prediction=pred_optimized[&#39;df&#39;], prediction_col=&#39;yhat&#39;, residual=pred_optimized[&#39;df&#39;], residual_label=&#39;Residual error&#39;, ylabel=&#39;feature value (y)&#39;, window_size=get_n_weeks_window(4*params[&#39;output_size&#39;])) . We can compare both models by zooming in on the last time window, corresponding to the last year of data. . mwvh.plot_time_series( title=&#39;Time Series Visualization&#39;, subtitle=&#39;default vs. optimized model predictions&#39;, name=(&#39;Input - Data Visualization{0}&#39; + &#39;Training - {1} weeks ({2} samples){0}&#39; + &#39;Testing - {3} weeks ({4} samples)&#39;).format( &#39; n&#39;, df_train.shape[0], X_train.shape[0], df_test.shape[0], X_test.shape[0]), testing=df_test, confidence=pred_optimized[&#39;df&#39;], confidence_label=&#39;Confidence interval&#39;, prediction=[pred_default[&#39;df&#39;], pred_optimized[&#39;df&#39;]], prediction_label=[&#39;Predicted data (default)&#39;, &#39;Predicted data (optimized)&#39;], residual=[pred_default[&#39;df&#39;], pred_optimized[&#39;df&#39;]], residual_label=[&#39;Residual error (default)&#39;, &#39;Residual error (optimized)&#39;], ylabel=&#39;feature value (y)&#39;, window_size=get_n_weeks_window(4*params[&#39;output_size&#39;])) .",
            "url": "https://braibaud.github.io/blog/lstm/keras/keras%20tuner/python/machine%20learning/timeseries/2021/05/31/LSTM-timeseries-forecasting-with-Keras-Tuner.html",
            "relUrl": "/lstm/keras/keras%20tuner/python/machine%20learning/timeseries/2021/05/31/LSTM-timeseries-forecasting-with-Keras-Tuner.html",
            "date": " • May 31, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hi there 👋 . I am currently working as Data Science Lead EMEA in Geneva, Switzerland. . My Software Projects . Related to Data Science: . PWML: Python 3 library useful for training hierarchical classification models on top of scikit-learn. It also contains a tons of useful helpers for both results representation as well as experiments management using Neptune. Deployed on Pypi. | . | Related to Space Exploration: . Nasa Rover Images: A Python project for easing rover images download and images post-processing (e.g. debayering). This is also the place where I post stitched and post-processed images (Python 3 + Jupyter based). | . | Related to Home-Assistant: . AirThings Integration: Home Assistant custom component for the AirThings platform integration (Python 3 based). | AirThings API: Python Wrappers for AirThings public dashboard API (Python 3 based). Deployed on PyPi. | . | Other Projects: . ParallelExecution: A SQL Server solution for parallelizing SQL Server commands (.NET C# based). | . | . My Statistics . .",
          "url": "https://braibaud.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://braibaud.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}