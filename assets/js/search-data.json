{
  
    
        "post0": {
            "title": "Title",
            "content": "import numpy .",
            "url": "https://braibaud.github.io/blog/2021/05/31/Untitled.html",
            "relUrl": "/2021/05/31/Untitled.html",
            "date": " • May 31, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "LSTM timeseries forecasting with Keras Tuner",
            "content": "About . This project is a demonstration of some of capabilities of Keras Tuner. This project is an attempt to use an LSTM based neural network (RNN) to forecast timeseries data. . The required libraries . Import the must-have libraries: . import numpy as np import pandas as pd import datetime as dt . Import the elements required from the scikit-learn library: . import sklearn as sk import sklearn.preprocessing as skp import sklearn.model_selection as skms import sklearn.pipeline as skpl import sklearn.decomposition as skd import sklearn.linear_model as sklm import sklearn.dummy as sky import sklearn.metrics as skme . Enables defining partial functions: . from functools import partial . Import the keras elements from the tensorflow library: . import tensorflow as tf from tensorflow import keras as k from tensorflow.keras import backend as kb from tensorflow.keras import callbacks as kc from tensorflow.keras import models as km from tensorflow.keras import layers as kl from tensorflow.keras import regularizers as kr from tensorflow.keras import optimizers as ko from tensorflow.keras import utils as ku . Import the keras-tuner library as we&#39;ll use it to tune hyperparameters: . import kerastuner as kt from kerastuner import tuners as ktt . Import matplotlib and set the default magic: . import matplotlib as mat from matplotlib import pyplot as plt import pylab as pyl import seaborn as sns %matplotlib inline %config InlineBackend.figure_format = &#39;retina&#39; . Import the mlviz library used to plot time-series visualizations: . from mlviz.timeseries import visualizationhelpers as mwvh from mlviz.utilities import graphichelpers as mwgh . The project parameters . Reset the predefined matplotlib style: . mwgh.GraphicsStatics.initialize_matplotlib_styles() . Here is the color palette of this project: . sns.palplot(mwgh.GraphicsStatics.g_palette) . Let&#39;s capture all the usefull project&#39;s parameters in a dictionary: . params = {} params[&#39;project_date&#39;] = &#39;2021-05-31&#39; params[&#39;project_name&#39;] = &#39;LSTM timeseries forecasting with Keras Tuner-DATA&#39; params[&#39;data_frequency&#39;] = &#39;W-SAT&#39; params[&#39;input_size&#39;] = 52 # N weeks of data to input into the network params[&#39;output_size&#39;] = 13 # N weeks of data to output from the network params[&#39;testing_size&#39;] = 52 # N weeks of data to keep for testing the model params[&#39;lag_size&#39;] = [13, 26, 39] # Lagged data series injected into the network . The timeseries data . The input data is available in a csv file named 2021-05-31-LSTM timeseries forecasting with Keras Tuner-DATA.csv located in the data folder. It has got 2 columns date containing the date of event and value holding the value of the source. We&#39;ll rename these 2 columns as ds and y for convenience. Let&#39;s load the csv file using the pandas library and have a look at the data. . df = pd.read_csv( filepath_or_buffer=&#39;../assets/data/{0}-{1}.csv&#39;.format( params[&#39;project_date&#39;], params[&#39;project_name&#39;]), sep=&#39;;&#39;) df.rename( columns = { &#39;date&#39;: &#39;index&#39;, &#39;value&#39;: &#39;y&#39; }, inplace=True) df[&#39;index&#39;] = pd.to_datetime( arg=df[&#39;index&#39;], dayfirst=True) df.sort_values( by=&#39;index&#39;, ascending=True, inplace=True) df.set_index( keys=&#39;index&#39;, inplace=True) df = df.asfreq( freq=params[&#39;data_frequency&#39;]) df[&#39;ds&#39;] = df.index print(&#39;df.shape = {0}&#39;.format(df.shape)) df.tail(5) . . df.shape = (625, 2) . y ds . index . 2019-09-28 5547 | 2019-09-28 | . 2019-10-05 6459 | 2019-10-05 | . 2019-10-12 5838 | 2019-10-12 | . 2019-10-19 5894 | 2019-10-19 | . 2019-10-26 7925 | 2019-10-26 | . Prepare data for the network . It is time to prepare the dataset to feed into the LSTM network. We&#39;ll use 4 features as input: the current data point as well as 3 additional data points from respectively 13, 26 and 39 weeks before the current datapoint. . . It&#39;s easy to calculate the width of a sample: . sample_width = max(params[&#39;lag_size&#39;]) + params[&#39;input_size&#39;] + params[&#39;output_size&#39;] print(&#39;sample_width: {0}&#39;.format(sample_width)) . sample_width: 104 . To avoid any overlap between the training and the testing data set, we&#39;ll first split the dataframes, keeping params[&#39;testing_size&#39;] samples for testing our model. We need to make sure that no data point used for training is also used for testing our model. . threshold_date = pd.to_datetime(df.index[df.shape[0] - (sample_width + params[&#39;testing_size&#39;])]) print(&#39;Cutoff date for training/testing split is {0}&#39;.format(threshold_date.strftime(&#39;%d/%m/%Y&#39;))) . Cutoff date for training/testing split is 05/11/2016 . Let&#39;s cut the dataframe at the right date: . test_mask = (df[&#39;ds&#39;] &gt; threshold_date) df_train = df[~test_mask] df_test = df[test_mask] print(&#39;df_train.shape = {0}&#39;.format(df_train.shape)) print(&#39;df_test.shape = {0}&#39;.format(df_test.shape)) . df_train.shape = (470, 2) df_test.shape = (155, 2) . The prepare_data funtion will take care of doing exactly this: . def prepare_data(data, lag_data, cols_in, steps_in, cols_out, steps_out, scaler_in=None, scaler_out=None): df = data.copy() steps_lag = 0 if lag_data is not None and len(lag_data) &gt; 0: steps_lag = max(lag_data) for i, lag in enumerate(lag_data): lag_col = &#39;y_{0}&#39;.format(lag) df[lag_col] = df[&#39;y&#39;].shift(lag) cols_in.append(lag_col) samples = df.shape[0] - (steps_in + steps_out + steps_lag) + 1 if samples &lt; 1: raise ValueError(&#39;not enough data to produce 1 sample.&#39;) index = list(df.index) cols_in_indices = {name: i for i, name in enumerate(cols_in)} cols_out_indices = {name: i for i, name in enumerate(cols_out)} df.reset_index(inplace=True) if scaler_in is None: scaler_in = skpl.Pipeline([ (&#39;std&#39;, skp.StandardScaler()), (&#39;minmax&#39;, skp.MinMaxScaler(feature_range = (-1, 1)))]) X_input_scaled = scaler_in.fit_transform(df[cols_in].values) else: X_input_scaled = scaler_in.transform(df[cols_in].values) if scaler_out is None: scaler_out = skpl.Pipeline([ (&#39;std&#39;, skp.StandardScaler()), (&#39;minmax&#39;, skp.MinMaxScaler(feature_range = (-1, 1)))]) y_output_scaled = scaler_out.fit_transform(df[cols_out].values) else: y_output_scaled = scaler_out.transform(df[cols_out].values) X = [] y = [] for sample in range(samples): for step_in in range(steps_in): for col_in in range(len(cols_in)): X.append(X_input_scaled[sample+steps_lag+step_in, col_in]) for step_out in range(steps_out): for col_out in range(len(cols_out)): y.append(y_output_scaled[sample+steps_lag+steps_in+step_out, col_out]) X = np.array(X).reshape(samples, steps_in, len(cols_in)) y = np.array(y).reshape(samples, steps_out, len(cols_out)) return X, y, index, scaler_in, scaler_out, cols_in_indices, cols_out_indices . Every intput feature (passed via the function parameter cols_in) is going to be rescalled using a scikit-learn pipeline containing first a StandardScaler and then a MinMaxScaler in order to end up with a feature range of [-1, +1] required by neural networks. . X_train, y_train, index_train, scaler_in, scaler_out, cols_in_indices_train, cols_out_indices_train = prepare_data( data=df_train, lag_data=params[&#39;lag_size&#39;], cols_in=[&#39;y&#39;], steps_in=params[&#39;input_size&#39;], cols_out=[&#39;y&#39;], steps_out=params[&#39;output_size&#39;]) print(&#39;X_train.shape: {0}&#39;.format(X_train.shape)) print(&#39;y_train.shape: {0}&#39;.format(y_train.shape)) . X_train.shape: (367, 52, 4) y_train.shape: (367, 13, 1) . To prepare the testing data, we need to reuse both input (variable scaler_in) and output (variable scaler_out) pipelines in order to keep data scaled in the same way. . X_test, y_test, index_test, _, _, cols_in_indices_test, cols_out_indices_test = prepare_data( data=df_test, lag_data=params[&#39;lag_size&#39;], cols_in=[&#39;y&#39;], steps_in=params[&#39;input_size&#39;], cols_out=[&#39;y&#39;], steps_out=params[&#39;output_size&#39;], scaler_in=scaler_in, scaler_out=scaler_out) print(&#39;X_test.shape: {0}&#39;.format(X_test.shape)) print(&#39;y_test.shape: {0}&#39;.format(y_test.shape)) . X_test.shape: (52, 52, 4) y_test.shape: (52, 13, 1) . Data visualization . mwvh.plot_time_series( title=&#39;timeseries visualization&#39;, subtitle=&#39;data preparation&#39;, name=(&#39;Input - Data Visualization{0}&#39; + &#39;Training - {1} weeks{0}&#39; + &#39;Testing - {2} weeks&#39;).format( &#39; n&#39;, df_train.shape[0], df_test.shape[0]), training=df_train, testing=df_test, ylabel=&#39;feature value (y)&#39;, split=threshold_date) .",
            "url": "https://braibaud.github.io/blog/lstm/keras/keras%20tuner/python/machine%20learning/timeseries/2021/05/31/LSTM-timeseries-forecasting-with-Keras-Tuner.html",
            "relUrl": "/lstm/keras/keras%20tuner/python/machine%20learning/timeseries/2021/05/31/LSTM-timeseries-forecasting-with-Keras-Tuner.html",
            "date": " • May 31, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://braibaud.github.io/blog/jupyter/2021/05/31/EXAMPLE-2020-02-20-test.html",
            "relUrl": "/jupyter/2021/05/31/EXAMPLE-2020-02-20-test.html",
            "date": " • May 31, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hi there 👋 . I am currently working as Data Science Lead EMEA in Geneva, Switzerland. . My Software Projects . Related to Data Science: . PWML: Python 3 library useful for training hierarchical classification models on top of scikit-learn. It also contains a tons of useful helpers for both results representation as well as experiments management using Neptune. Deployed on Pypi. | . | Related to Space Exploration: . Nasa Rover Images: A Python project for easing rover images download and images post-processing (e.g. debayering). This is also the place where I post stitched and post-processed images (Python 3 + Jupyter based). | . | Related to Home-Assistant: . AirThings Integration: Home Assistant custom component for the AirThings platform integration (Python 3 based). | AirThings API: Python Wrappers for AirThings public dashboard API (Python 3 based). Deployed on PyPi. | . | Other Projects: . ParallelExecution: A SQL Server solution for parallelizing SQL Server commands (.NET C# based). | . | . My Statistics . .",
          "url": "https://braibaud.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://braibaud.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}